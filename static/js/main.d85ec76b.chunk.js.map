{"version":3,"sources":["components/NavigationBar.js","components/DataView.js","components/CrossTabView.js","components/ChartView.js","components/FieldSelect.js","components/NotFound.js","components/DataPage.js","components/HomePage.js","App.js","index.js"],"names":["NavigationBar","className","exact","activeClassName","to","React","Component","DataView","this","props","selectedQuestion","id","elementId","selectedGroup","data","renderFunction","CrossTabView","survey","renderCrossTabs","cleanData","map","x","group","response","numeric","$","pivot","rows","aggregator","pivotUtilities","aggregators","cols","ChartView","renderChart","newX","title","renderer","c3_renderers","rowOrder","colOrder","document","getElementById","getElementsByTagName","remove","FieldSelect","slctDivRef","createRef","descDivRef","slctRef","options","dict","optionComponents","Object","keys","key","option","value","selectedDescription","selected","description","ref","size","onChange","handleSelect","dangerouslySetInnerHTML","__html","current","style","height","offsetHeight","selectedIndex","NotFound","DataPage","state","undefined","selectedTopic","handleGroupSelect","bind","handleTopicSelect","handleQuestionSelect","surveyId","match","params","surveys","groups","topics","questions","surveyData","d3","csv","process","then","setState","event","target","HomePage","App","path","component","ReactDOM","render"],"mappings":"oyDAIqBA,E,YACjB,aAAe,uE,sEAIX,OACI,wBAAIC,UAAY,gBACZ,wBAAIA,UAAY,YACZ,kBAAC,IAAD,CAASC,OAAK,EAACD,UAAU,WAAWE,gBAAgB,SAASC,GAAG,KAAhE,SAIJ,wBAAIH,UAAY,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWE,gBAAgB,SAASC,GAAG,yBAA1D,qB,kDAbuBC,IAAMC,W,QCF5BC,E,iLAEb,OAAIC,KAAKC,MAAMC,iBAIX,yBAAKC,GAAMH,KAAKC,MAAMG,YAHf,O,2CAQX,IAAIC,EAAgBL,KAAKC,MAAMI,cAC3BH,EAAmBF,KAAKC,MAAMC,iBAC9BI,EAAON,KAAKC,MAAMK,KAClBC,EAAiBP,KAAKC,MAAMM,eAC5BF,GAAiBH,GAAoBI,GACrCC,EAAeP,KAAKC,MAAMG,UAAWC,EAAeH,EAAkBI,O,GAhB5CT,IAAMC,WCCvBU,E,iLAEb,OAAO,kBAAC,EAAD,CACKJ,UAAY,WACZK,OAAWT,KAAKC,MAAMQ,OACtBH,KAASN,KAAKC,MAAMK,KACpBD,cAAkBL,KAAKC,MAAMI,cAC7BH,iBAAqBF,KAAKC,MAAMC,iBAChCK,eAAmBP,KAAKU,oB,sCAIxBN,EAAWC,EAAeH,EAAkBI,GACxD,IAAIK,EAAYL,EAAKM,KAAI,SAACC,GAAQ,MAAO,CAACC,MAAQD,EAAER,EAAcF,IAAKY,SAAWF,EAAEX,EAAiBC,KAAO,mBACzGD,EAAiBc,QAChBC,EAAE,IAAD,OAAKb,IAAac,MAAMP,EACrB,CACIQ,KAAO,CAAC,SACRC,WAAYH,EAAEI,eAAeC,YAAjB,QAAwC,CAAC,eAI7DL,EAAE,IAAD,OAAKb,IAAac,MAAMP,EACrB,CACIQ,KAAO,CAAC,SACRI,KAAM,CAAC,YACPH,WAAYH,EAAEI,eAAeC,YAAjB,c,GA1BUzB,IAAMC,WCA3B0B,E,iLAEb,OAAO,kBAAC,EAAD,CACKpB,UAAY,QACZK,OAAWT,KAAKC,MAAMQ,OACtBH,KAASN,KAAKC,MAAMK,KACpBD,cAAkBL,KAAKC,MAAMI,cAC7BH,iBAAqBF,KAAKC,MAAMC,iBAChCK,eAAmBP,KAAKyB,gB,kCAI5BrB,EAAWC,EAAeH,EAAkBI,GACpD,IAAIK,EAAYL,EAAKM,KAAI,SAAAC,GACrB,IAAIa,EAAO,GAGX,OAFAA,EAAKrB,EAAcsB,OAASd,EAAER,EAAcF,IAC5CuB,EAAI,SAAeb,EAAEX,EAAiBC,KAAO,eACtCuB,KAERxB,EAAiBc,QAChBC,EAAE,IAAD,OAAKb,IAAac,MAAMP,EACrB,CACIQ,KAAO,CAACd,EAAcsB,OACtBP,WAAYH,EAAEI,eAAeC,YAAjB,QAAwC,CAAC,aACrDM,SAAUX,EAAEI,eAAeQ,aAAa,wBACxCC,SAAU,kBAIlBb,EAAE,IAAD,OAAKb,IAAac,MAAMP,EAAW,CAChCQ,KAAO,CAACd,EAAcsB,OACtBJ,KAAM,CAAC,YACPH,WAAYH,EAAEI,eAAeC,YAAY,+BACzCM,SAAUX,EAAEI,eAAeQ,aAAa,gCACxCC,SAAU,eAAgBC,SAAU,iBAExCC,SAASC,eAAe,SAASC,qBAAqB,KAAK,GAAGC,c,GApCnCtC,IAAMC,WCCxBsC,G,kBACjB,aAAe,IAAD,8BACV,+CACKC,WAAaxC,IAAMyC,YACxB,EAAKC,WAAa1C,IAAMyC,YACxB,EAAKE,QAAU3C,IAAMyC,YAJX,E,sEAQV,IAAItC,KAAKC,MAAMwC,QACX,OAAO,KAEX,IAsCWC,EAtCPC,GAsCOD,EAtCsB1C,KAAKC,MAAMwC,QAuCzCG,OAAOC,KAAKH,GAAM9B,KAAI,SAAAkC,GAAG,OAAIJ,EAAKI,OAvCgBlC,KAAI,SAACmC,GACtD,OAAO,4BAAQC,MAASD,EAAO5C,IAAK4C,EAAOpB,UAE3CsB,EAAsBjD,KAAKC,MAAMiD,SAAWlD,KAAKC,MAAMwC,QAAQzC,KAAKC,MAAMiD,UAAUC,YAAc,GACtG,OACI,6BACI,yBAAK1D,UAAY,OACb,4BAAKO,KAAKC,MAAM0B,QAEpB,yBAAKlC,UAAY,OACb,8BAAOO,KAAKC,MAAMkD,cAEtB,yBAAK1D,UAAY,OACb,yBAAKA,UAAY,mBAAmB2D,IAAOpD,KAAKqC,YAC5C,4BAAQ5C,UAAY,aAAa4D,KAAQ,EAAGD,IAAOpD,KAAKwC,QAASQ,MAAShD,KAAKC,MAAMiD,SAAUI,SAAUtD,KAAKC,MAAMsD,cAC/GZ,IAGT,yBAAKlD,UAAY,qBAAqB2D,IAAOpD,KAAKuC,YAC9C,0BAAM9C,UAAY,2BAA2B+D,wBAAyB,CAACC,OAASR,U,2CAS5FjD,KAAKqC,WAAWqB,SAAY1D,KAAKuC,WAAWmB,UAC5C1D,KAAKuC,WAAWmB,QAAQC,MAAMC,OAA9B,UAA0C5D,KAAKqC,WAAWqB,QAAQG,aAAlE,OAGD7D,KAAKwC,QAAQkB,UAAY1D,KAAKC,MAAMiD,WACnClD,KAAKwC,QAAQkB,QAAQI,cAAgB,U,GA7CRjE,IAAMC,Y,YCF1BiE,E,iLAEb,OACI,6BACI,8CADJ,IAC4B,6BACxB,8E,GALsBlE,IAAMC,WCMvBkE,E,YACjB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACT5D,mBAAgB6D,EAChBC,mBAAgBD,EAChBhE,sBAAmBgE,GAEvB,EAAKE,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,qBAAuB,EAAKA,qBAAqBF,KAA1B,gBATlB,E,kFAYVrE,KAAKwE,SAAWxE,KAAKC,MAAMwE,MAAMC,OAAOF,SACpCxE,KAAKwE,UAAYxE,KAAKwE,YAAYG,MAClC3E,KAAKS,OAASkE,IAAQ3E,KAAKwE,a,+BAK/B,OAAIxE,KAAKS,OAIL,yBAAKhB,UAAY,mBACb,yBAAKA,UAAY,OACb,yBAAKA,UAAY,YACb,kBAAC,EAAD,CACIkC,MAAQ,QACRwB,YAAc,+CACdV,QAAYmC,IACZ1B,SAAYlD,KAAKiE,MAAM5D,cACvBkD,aAAgBvD,KAAKoE,qBAG7B,yBAAK3E,UAAY,YACb,kBAAC,EAAD,CACIkC,MAAQ,QACRwB,YAAc,gDACdV,QAAYzC,KAAKS,OAAOoE,OACxB3B,SAAYlD,KAAKiE,MAAME,cACvBZ,aAAgBvD,KAAKsE,qBAG7B,yBAAK7E,UAAY,YACb,kBAAC,EAAD,CACIkC,MAAQ,WACRwB,YAAc,+BACdV,QAAWzC,KAAKiE,MAAME,cAClBnE,KAAKS,OAAOoE,OAAO7E,KAAKiE,MAAME,eAAeW,UAC7C,KAEJ5B,SAAYlD,KAAKiE,MAAM/D,iBACvBqD,aAAgBvD,KAAKuE,yBAKjC,yBAAK9E,UAAY,OACb,kBAAC,EAAD,CACIgB,OAAWT,KAAKS,OAChBH,KAASN,KAAKiE,MAAMc,WACpB1E,cAAkBuE,IAAO5E,KAAKiE,MAAM5D,eACpCH,iBAAqBF,KAAKiE,MAAM/D,iBAC5BF,KAAKS,OAAOoE,OAAO7E,KAAKiE,MAAME,eAAeW,UAAU9E,KAAKiE,MAAM/D,kBAAoB,QAIlG,yBAAKT,UAAY,OACb,kBAAC,EAAD,CACIgB,OAAWT,KAAKS,OAChBH,KAASN,KAAKiE,MAAMc,WACpB1E,cAAkBuE,IAAO5E,KAAKiE,MAAM5D,eACpCH,iBAAqBF,KAAKiE,MAAM/D,iBAC5BF,KAAKS,OAAOoE,OAAO7E,KAAKiE,MAAME,eAAeW,UAAU9E,KAAKiE,MAAM/D,kBAAoB,SArD/F,kBAAC,EAAD,Q,0CA6DM,IAAD,OACZF,KAAKS,SAGTuB,SAASL,MAAQ3B,KAAKS,OAAOkB,MAC7BqD,GAAGC,IAAH,UAAUC,GAAV,sBAA8ClF,KAAKwE,SAAnD,SAAmEW,MAAK,SAAC7E,GACvE,EAAK8E,SAAS,CACZL,WAAazE,U,wCAKH+E,GACdrF,KAAKoF,SAAS,CACV/E,cAAgBgF,EAAMC,OAAOtC,U,wCAInBqC,GACdrF,KAAKoF,SAAS,CACVjB,cAAgBkB,EAAMC,OAAOtC,MAC7B9C,sBAAmBgE,M,2CAINmB,GACjBrF,KAAKoF,SAAS,CACVlF,iBAAmBmF,EAAMC,OAAOtC,Y,GA7GNnD,IAAMC,WCNvByF,E,iLAEb,OACI,yBAAK9F,UAAY,YACb,8BACI,ke,GALkBI,IAAMC,W,QCiC7B0F,E,YAzBb,aAAe,IAAD,8BACZ,+CACKvB,MAAQ,CACXc,WAAa,KACb1E,cAAgB,KAChBH,iBAAmB,MALT,E,sEAUZ,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,iBACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAAC+F,KAAK,IAAIC,UAAWH,IACjC,kBAAC,IAAD,CAAO7F,OAAK,EAAC+F,KAAK,oBAAoBC,UAAW1B,IACjD,kBAAC,IAAD,CAAO0B,UAAW3B,W,GAlBZlE,IAAMC,W,YCHxB6F,IAASC,OACP,kBAAC,EAAD,MACA5D,SAASC,eAAe,W","file":"static/js/main.d85ec76b.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/NavigationBar.css'\nimport { NavLink } from 'react-router-dom'\n\nexport default class NavigationBar extends React.Component { \n    constructor() {\n        super();\n    }\n    render() {\n        return (\n            <ul className = \"nav nav-tabs\">\n                <li className = \"nav-item\">\n                    <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/\">\n                        Home\n                    </NavLink> \n                </li>\n                <li className = \"nav-item\">\n                    <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/survey/income_survey\">\n                        Income Survey\n                    </NavLink>\n                </li>\n            </ul>\n        )\n    }\n    componentDidMount() {\n\n    }\n}","import React from 'react'\n\nexport default class DataView extends React.Component {\n    render() {\n        if(!this.props.selectedQuestion) {\n            return null;\n        }\n        return (\n            <div id = {this.props.elementId}></div>\n        )\n    }\n\n    componentDidUpdate() {\n        let selectedGroup = this.props.selectedGroup;\n        let selectedQuestion = this.props.selectedQuestion; \n        let data = this.props.data; \n        let renderFunction = this.props.renderFunction;\n        if (selectedGroup && selectedQuestion && data) {\n            renderFunction(this.props.elementId, selectedGroup, selectedQuestion, data);\n        }\n    }\n}","import React from 'react'\nimport DataView from './DataView'\n\nexport default class CrossTabView extends React.Component {\n    render() {\n        return <DataView \n                    elementId = \"crosstab\" \n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderCrossTabs }\n                />\n    }\n\n    renderCrossTabs(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map((x) => { return {group : x[selectedGroup.id], response : x[selectedQuestion.id] || \" No Response\"} });\n        if(selectedQuestion.numeric) {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"])\n                });\n        }\n        else {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    cols: [\"response\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Count\"]()\n                });\n        }\n    }\n}","import React from 'react'\nimport DataView from './DataView'\n\nexport default class ChartView extends React.Component { \n    render() {\n        return <DataView\n                    elementId = \"chart\"\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderChart }\n                />\n    }\n\n    renderChart(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map(x => {\n            let newX = {};\n            newX[selectedGroup.title] = x[selectedGroup.id];\n            newX[\"response\"] = x[selectedQuestion.id] || \" No response\";\n            return newX;\n        })\n        if(selectedQuestion.numeric) {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [selectedGroup.title],\n                    aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"]),\n                    renderer: $.pivotUtilities.c3_renderers[\"Horizontal Bar Chart\"],\n                    rowOrder: \"value_z_to_a\"\n                });\n        }\n        else { \n            $(`#${elementId}`).pivot(cleanData, {\n                rows : [selectedGroup.title],\n                cols: [\"response\"],\n                aggregator: $.pivotUtilities.aggregators[\"Count as Fraction of Rows\"](),\n                renderer: $.pivotUtilities.c3_renderers[\"Horizontal Stacked Bar Chart\"],\n                rowOrder: \"value_z_to_a\", colOrder: \"value_z_to_a\",\n            });\n            document.getElementById(\"chart\").getElementsByTagName(\"p\")[0].remove();\n        }\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/FieldSelect.css'\n\nexport default class FieldSelect extends React.Component { \n    constructor() { \n        super();\n        this.slctDivRef = React.createRef();\n        this.descDivRef = React.createRef();\n        this.slctRef = React.createRef();\n    }\n\n    render() {\n        if(!this.props.options) {\n            return null;\n        }\n        let optionComponents = getValues(this.props.options).map((option) => {\n            return <option value = {option.id}>{option.title}</option>\n        });\n        let selectedDescription = this.props.selected ? this.props.options[this.props.selected].description : \"\";\n        return (\n            <div>\n                <div className = \"row\">\n                    <h4>{this.props.title}</h4>\n                </div>\n                <div className = \"row\">\n                    <span>{this.props.description}</span>\n                </div>\n                <div className = \"row\">\n                    <div className = \"col-md-6 slctDiv\" ref = {this.slctDivRef}>\n                        <select className = \"align-left\" size = {8} ref = {this.slctRef} value = {this.props.selected} onChange={this.props.handleSelect}>\n                            {optionComponents}\n                        </select>\n                    </div>\n                    <div className = \"col-md-6 scrolling\" ref = {this.descDivRef}>\n                        <span className = \"align-top align-text-top\" dangerouslySetInnerHTML={{__html : selectedDescription}}>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        if (this.slctDivRef.current &&  this.descDivRef.current) {\n            this.descDivRef.current.style.height = `${this.slctDivRef.current.offsetHeight}px`\n        }\n\n        if(this.slctRef.current && !this.props.selected) { \n            this.slctRef.current.selectedIndex = \"-1\";\n        }\n    }\n}\n\nfunction getValues(dict) {\n    return Object.keys(dict).map(key => dict[key])\n}\n\nFieldSelect.propTypes = { \n    title : PropTypes.string,\n\n}","import React from 'react'\n\nexport default class NotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Page not found</h1> <br/>\n                <h3>Please double check the URL and try again</h3>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CrossTabView from './CrossTabView'\nimport ChartView from './ChartView'\nimport FieldSelect from './FieldSelect'\nimport { surveys, groups } from '../config/fields.json'\nimport NotFound from './NotFound'\n\nexport default class DataPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedGroup : undefined,\n            selectedTopic : undefined,\n            selectedQuestion : undefined\n        }\n        this.handleGroupSelect = this.handleGroupSelect.bind(this);\n        this.handleTopicSelect = this.handleTopicSelect.bind(this);\n        this.handleQuestionSelect = this.handleQuestionSelect.bind(this); \n    }\n    componentWillMount() {\n        this.surveyId = this.props.match.params.surveyId;\n        if (this.surveyId && this.surveyId in surveys) {\n            this.survey = surveys[this.surveyId];\n        }\n    }\n\n    render() {\n        if(!this.survey) {\n            return <NotFound />\n        }\n        return (\n            <div className = \"container-fluid\">\n                <div className = \"row\">\n                    <div className = \"col-md-6\">\n                        <FieldSelect \n                            title = \"Group\"\n                            description = \"Select how you would like to group responses\"\n                            options = { groups }\n                            selected = {this.state.selectedGroup}\n                            handleSelect = {this.handleGroupSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-6\">\n                        <FieldSelect\n                            title = \"Topic\"\n                            description = \"Select a topic that you would like to examine\"\n                            options = { this.survey.topics }\n                            selected = {this.state.selectedTopic}\n                            handleSelect = {this.handleTopicSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-6\">\n                        <FieldSelect\n                            title = \"Question\"\n                            description = \"Select a question to examine\"\n                            options = {this.state.selectedTopic ? \n                                this.survey.topics[this.state.selectedTopic].questions :\n                                null\n                            }\n                            selected = {this.state.selectedQuestion}\n                            handleSelect = {this.handleQuestionSelect}\n                        />\n                    </div>\n                </div>\n                \n                <div className = \"row\">\n                    <ChartView\n                        survey = { this.survey } \n                        data = { this.state.surveyData }\n                        selectedGroup = { groups[this.state.selectedGroup] }\n                        selectedQuestion = { this.state.selectedQuestion ? \n                            this.survey.topics[this.state.selectedTopic].questions[this.state.selectedQuestion] : null\n                        } \n                    />\n                </div>\n                <div className = \"row\">\n                    <CrossTabView\n                        survey = { this.survey } \n                        data = { this.state.surveyData }\n                        selectedGroup = { groups[this.state.selectedGroup] }\n                        selectedQuestion = { this.state.selectedQuestion ? \n                            this.survey.topics[this.state.selectedTopic].questions[this.state.selectedQuestion] : null\n                        } \n                    />\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        if(!this.survey){\n            return;\n        }\n        document.title = this.survey.title;\n        d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.surveyId}.csv`).then((data) => {\n          this.setState({\n            surveyData : data\n          })\n        });\n      }\n\n    handleGroupSelect(event) {\n        this.setState({\n            selectedGroup : event.target.value\n        })\n    }\n\n    handleTopicSelect(event) {\n        this.setState({\n            selectedTopic : event.target.value,\n            selectedQuestion : undefined\n        })\n    }\n    \n    handleQuestionSelect(event) {\n        this.setState({\n            selectedQuestion : event.target.value\n        })\n    }\n}\n\nDataPage.propTypes = {\n    survey : PropTypes.object\n}","import React from 'react'\n\nexport default class HomePage extends React.Component {\n    render() {\n        return (\n            <div className = \"HomePage\">\n                <span>\n                    <p>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                    </p>\n                </span>\n\n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar'\nimport DataPage from './components/DataPage'\nimport HomePage from './components/HomePage'\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport NotFound from './components/NotFound'\n\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n    this.state = {\n      surveyData : null,\n      selectedGroup : null,\n      selectedQuestion : null\n    }\n  }\n  \n  render() {\n    return (\n      <Router>\n        <div className=\"App container\">\n          <NavigationBar />\n          <Switch>\n            <Route exact path=\"/\" component={HomePage}/>\n            <Route exact path=\"/survey/:surveyId\" component={DataPage}/>\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}