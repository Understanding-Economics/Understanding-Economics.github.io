{"version":3,"sources":["components/NavigationBar.js","components/ScrollableDesc.js","components/FieldSelect.js","components/NotFound.js","DataType.js","components/DataView.js","Colors.js","Utils.js","components/CrossTabView.js","components/StackedChartView.js","components/ChartLegend.js","components/CorrectDisplay.js","components/CategoricalDisplay.js","components/StatBubble.js","components/HistogramView.js","NumberFormats.js","components/NumericDisplay.js","components/TreatmentChartView.js","components/DummyChartView.js","components/TreatmentDisplay.js","components/ImageView.js","components/WordcloudDisplay.js","components/UmbrellaDisplay.js","components/FrequencyChartView.js","components/FrequencyDisplay.js","components/DataDisplay.js","components/DataPage.js","components/DemoImage.js","components/TextComponents.js","components/HighlightBlock.js","components/HighlightBar.js","components/ResetLink.js","components/HomePage.js","components/AboutPage.js","components/Footer.js","components/ContactPage.js","App.js","index.js"],"names":["NavigationBar","surveyLinks","Object","keys","surveys","map","surveyId","survey","className","activeClassName","to","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","exact","React","Component","ScrollableDesc","textStyle","minHeight","this","props","maxHeight","height","paddingRight","dangerouslySetInnerHTML","__html","content","style","ref","descDivRef","PureComponent","FieldSelect","slctDivRef","createRef","slctRef","options","dict","optionComponents","key","option","value","selectedTitle","selected","selectedDescription","short_description","description","size","onChange","e","handleSelect","target","current","selectedIndex","NotFound","DataType","CATEGORICAL","FREQUENCY","NUMERIC","TREATMENT","MULTICHOICE","KEYNESS","WORDCLOUD","UMBRELLA","DataView","selectedQuestion","width","marginLeft","elementId","componentDidUpdate","selectedGroup","renderFunction","data","filter","x","GREEN","BLUE","Colors","Histogram","Categorical","Binary","Gradient3","Gradient4","Gradient5","ReverseBinary","slice","reverse","ReverseGradient3","ReverseGradient4","ReverseGradient5","Utils","Date","getTimezoneOffset","getUniqueDictVals","sorter","v","i","a","indexOf","trim","length","sort","getCounts","responseKey","responseVals","undefined","filteredData","countsDict","val","forEach","propsDict","getProportions","groupKey","groupVal","total","getQuestionSorter","question","$","pivotUtilities","sortAs","b","localeCompare","getGroupSorter","group","getColorPattern","colorPattern","color","analyticsActive","logPageview","url","ReactGA","set","page","pageview","CrossTabView","renderCrossTabs","cleanData","response","sorters","pivot","rows","cols","aggregator","aggregators","StackedChartView","renderChart","bind","groupSorter","responseSorter","groupVals","concat","proportions","chartData","responseVal","chart","c3","generate","merge","all","bindto","columns","groups","order","parent","pattern","legend","item","onclick","show","padding","left","tooltip","grouped","format","name","ratio","index","wrap","count","d3","Math","round","bar","rotated","categories","y","max","tick","values","c3Override","correct","bars","document","getElementsByClassName","toString","replace","setProperty","ChartLabel","getElementById","baseVal","receiveChart","s","w","RegExp","ChartLegend","responses","legendItems","onMouseOver","charts","focus","onMouseLeave","revert","backgroundColor","fontSize","maxWidth","minWidth","paddingLeft","marginRight","marginTop","marginBottom","opacity","fontWeight","textDecoration","CorrectDisplay","correct_text","formatter","sourceText","source","Array","isArray","source_url","Error","sources","src","href","reduce","acc","cur","correctText","verticalAlign","CategoricalDisplay","state","showTable","onClick","toggleTable","setState","StatBubble","classNames","active","preventDefault","handleClick","toUpperCase","stat","toFixed","HistogramView","renderHistogram","nextProps","nextState","dataNumeric","Number","nticks","correctList","dataWithCorrect","minValue","min_val","min","maxValue","max_val","scale","scaleLinear","domain","range","bins","histogram","thresholds","ticks","binSizes","pop","bin","correctBin","load","types","grid","lines","text","class","position","axis","NumberFormats","percent","dollar","NumericDisplay","selectedGroupVal","averages","calcAverages","statBubbles","average","createClickHandler","sortedData","All","sum","groupId","questionId","row","k","TreatmentChartView","DummyChartView","displayElts","overflow","TreatmentDisplay","columnWidth","questions","chartViews","treatments","descriptions","bottom","push","ImageView","process","img_url","WordcloudDisplay","UmbrellaDisplay","subquestions","some","bubbles","FrequencyChartView","counts","FrequencyDisplay","selectedSurvey","toLowerCase","DataDisplay","specificDisplay","addSurveyType","survey_id","incomeSurveyData","tradeSurveyData","estateSurveyData","healthSurveyData","surveyData","noGroupTypes","DataPage","params","URLSearchParams","history","search","updateURL","handleGroupSelect","handleTopicSelect","handleQuestionSelect","additionalGroups","trackingUrl","location","pathname","getGroup","selectedTopic","getTopic","getQuestion","topics","displayGroupSelect","includes","delete","q","selectedTopicId","get","selectedGroupId","selectedQuestionId","DemoImage","Section","children","Subsection","HighlightBlock","borderColor","borderWidth","HighlightBar","highlightBlocks","highlights","highlight","paddingTop","paddingBottom","borderRadius","borderStyle","overflowX","ResetLink","window","scrollTo","HomePage","AboutPage","Footer","ContactPage","initialize","App","surveyRoutes","path","component","basename","ReactDOM","render"],"mappings":"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","file":"static/js/main.fa4ce128.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/NavigationBar.css'\nimport { NavLink } from 'react-router-dom'\nimport { surveys } from '../config/fields.json'\n\nexport default class NavigationBar extends React.Component { \n    constructor() {\n        super();\n    }\n    render() {\n        let surveyLinks = Object.keys(surveys).map(surveyId => {\n            let survey = surveys[surveyId]\n            return (\n                <li className = \"nav-item\">\n                    <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/survey/${surveyId}`}>\n                        {survey.title}\n                    </NavLink>\n                </li>\n            )\n        })\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n                    <ul className=\"navbar-nav mr-auto\">\n                    <li className = \"nav-item\">\n                        <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/\">\n                            Home\n                        </NavLink> \n                    </li>\n                    <li className = \"nav-item\">\n                        <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/about\">\n                            About\n                        </NavLink> \n                    </li>\n                    {surveyLinks}\n                    <li>\n                        <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/contact\">\n                            Contact Us\n                        </NavLink>\n                    </li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n    componentDidMount() {\n\n    }\n}","import React from 'react'\n\nexport default class ScrollableDesc extends React.PureComponent {\n    render() {\n        let textStyle = {\n            minHeight : this.props.minHeight,\n            maxHeight : this.props.maxHeight,\n            height : this.props.height,\n            paddingRight: \"10px\"\n        }\n        return (\n            <div>\n                <div className = \"row\">\n                    <strong>{this.props.title}</strong>\n                </div>\n                <div className = \"row\">\n                    <span className = \"scrolling\" dangerouslySetInnerHTML={{__html : this.props.content}} style = {textStyle} ref = {this.descDivRef}>\n                    </span>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/FieldSelect.css'\nimport '../App.css'\nimport ScrollableDesc from './ScrollableDesc';\n\nexport default class FieldSelect extends React.Component { \n    constructor() { \n        super();\n        this.slctDivRef = React.createRef();\n        this.descDivRef = React.createRef();\n        this.slctRef = React.createRef();\n    }\n\n    render() {\n        if(!this.props.options) {\n            return null;\n        }\n        let optionComponents = getValues(this.props.options).map((option) => {\n            return <option value = {option.id}>{option.title}</option>\n        });\n        let options = this.props.options;\n        let selectedTitle = this.props.selected ? options[this.props.selected].title : \"\";\n        let selectedDescription = this.props.selected ? options[this.props.selected].short_description || options[this.props.selected].description : \"\";\n        return (\n            <div className = \"FieldSelect\">\n                <div className = \"row\">\n                    <h4>{this.props.title}</h4>\n                </div>\n                <div className = \"row\">\n                    <span>{this.props.description}</span>\n                </div>\n                <div className = \"row slctDiv\" ref = {this.slctDivRef}>\n                    <select className = \"align-left\" size = {7} ref = {this.slctRef} value = {this.props.selected} onChange={ e => this.props.handleSelect(e.target.value)}>\n                        {optionComponents}\n                    </select>\n                </div>\n                <ScrollableDesc \n                    title = {selectedTitle} \n                    content = {selectedDescription}\n                    maxHeight = \"110px\"\n                    minHeight = \"75px\"\n                />\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        if(this.slctRef.current && !this.props.selected) { \n            this.slctRef.current.selectedIndex = \"-1\";\n        }\n    }\n}\n\nfunction getValues(dict) {\n    return Object.keys(dict).map(key => dict[key])\n}\n\nFieldSelect.propTypes = { \n    title : PropTypes.string,\n\n}","import React from 'react'\n\nexport default class NotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Page not found</h1> <br/>\n                <h3>Please double check the URL and try again</h3>\n            </div>\n        )\n    }\n}","const DataType = \n{\n    CATEGORICAL :  \"CATEGORICAL\", \n    FREQUENCY : \"FREQUENCY\", \n    NUMERIC : \"NUMERIC\",\n    TREATMENT : \"TREATMENT\",\n    MULTICHOICE : \"MULTICHOICE\",\n    KEYNESS : \"KEYNESS\",\n    WORDCLOUD : \"WORDCLOUD\",\n    UMBRELLA : \"UMBRELLA\"\n}\n\nexport default DataType;","import React from 'react'\n\nexport default class DataView extends React.Component {\n    render() {\n        if(!this.props.selectedQuestion) {\n            return null;\n        }\n        return (\n            <div className=\"DataView text-center\" style={{width: \"100%\", marginLeft : \"0px\"}}>\n                <div id = {this.props.elementId} style={{width:\"100%\"}}></div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        this.componentDidUpdate();\n    }\n\n    componentDidUpdate() {\n        let selectedGroup = this.props.selectedGroup;\n        let selectedQuestion = this.props.selectedQuestion; \n        let renderFunction = this.props.renderFunction;\n        if (selectedQuestion && this.props.data) {\n            let data = this.props.data.filter(x => (!selectedGroup || x[selectedGroup.id]) && x[selectedQuestion.id] && true)\n            renderFunction(this.props.elementId, selectedGroup, selectedQuestion, data);\n        }\n    }\n}","const GREEN = \"#8BCF9F\";\nconst BLUE = \"#6CC3D5\"; \nconst PURPLE = \"#aa80ff\";\nconst YELLOW = \"#FFCE67\";\nconst PINK = \"#ff80ff\";\nconst RED = \"#ff6666\";\nconst ORANGE = \"#F48C51\";\nconst MAROON = \"#DC6A4A\";\nconst IVORY = \"#E7E7BD\";\nconst GOLD = \"#CBA34C\";\nconst SKY = \"#ABBBD9\";\nconst CRIMSON = \"#c90016\";\nconst TAN = \"#D6A879\";\nconst FOREST = \"#5EB379\";\nconst BABY = \"#A6D5D3\";\nconst Colors = {}\n\nColors.Histogram = [GREEN],\nColors.Categorical = [GREEN, BLUE, YELLOW, ORANGE, RED, PURPLE, PINK, MAROON, IVORY, FOREST, GOLD, SKY, TAN, BABY ,CRIMSON],\nColors.Binary = [GREEN, BLUE],\nColors.Gradient3 = [GREEN, YELLOW, ORANGE], \nColors.Gradient4 = [GREEN, BLUE, YELLOW, ORANGE], \nColors.Gradient5 = [GREEN, BLUE, YELLOW, ORANGE, RED],\nColors.ReverseBinary = Colors.Binary.slice().reverse(), \nColors.ReverseGradient3 = Colors.Gradient3.slice().reverse(),\nColors.ReverseGradient4= Colors.Gradient4.slice().reverse(),\nColors.ReverseGradient5 = Colors.Gradient5.slice().reverse()\n\n\nexport default Colors","/* eslint no-undef: \"off\"*/\nimport Colors from './Colors'\nimport ReactGA from 'react-ga'\n\n\nlet date = new Date();\nlet timezone = date.getTimezoneOffset() / 60;\nlet analyticsActive = true;\n\nconst Utils = {\n    getUniqueDictVals: function(data, key, sorter) {\n        let vals = data.map(x => x[key]);\n        var uniqueVals = vals.filter((v, i, a) => a.indexOf(v) === i);\n        return uniqueVals.filter(x => x && x.trim().length > 0).sort(sorter);\n    },\n\n    // For each group, gets the proportion of each response\n    /**\n     *\n     * @param {array} data array of dictionaries representing the data\n     * @param {string} groupKey the group that we want proportions for\n     * @param {string} groupVal the specific group value that we want proportions for\n     * @param {string} responseKey the dictionary key of the response variable that we want proportions for\n     */\n     /* getProportions : function(data, groupKey, groupVal, responseKey){\n       var final_result = [];\n       var unique_rkeys = [];\n\n       for (var i = 0; i < data.length; i++) {\n           var rKey = data[i].responseKey;\n           if (unique_rkeys.includes(rKey)){\n               continue;\n           } else {\n               unique_rkeys.push(rKey);\n           }\n       }\n\n       var total_responses = data.length\n\n       for (i = 0; i < unique_rkeys.length; i++) {\n         var response_key = unique_rkeys[i]\n         final_result.push({\n            response_key: 0\n         })\n         for (var j = 0; j < data.length; j++) {\n             var gKey = data[j].groupKey;\n             var gVal = data[j].groupVal;\n             var rKey = data[j].responseKey;\n\n             if (rKey = response_key){\n                 final_result.response_key = final_result.response_key + 1;\n             } else {\n                 continue;\n             }\n          }\n\n          final_result.response_key = final_result.response_key / total_responses;\n\n        }\n\n         return final_result;\n\n     },*/\n\n    getCounts : function(data, responseKey) {\n        let responseVals = this.getUniqueDictVals(data, responseKey, undefined);\n        let filteredData = data.filter(x => x[responseKey] != undefined);\n        let countsDict = {}\n        for(let val of responseVals) {\n            countsDict[val] = 0;\n        }\n        filteredData.forEach(x => countsDict[x[responseKey]]++);\n        let propsDict = {};\n        for(let val of responseVals){ \n            propsDict[val] = countsDict[val]; \n        }\n        return propsDict;\n    }, \n    getProportions : function(data, groupKey, groupVal, responseKey) {\n         let responseVals = this.getUniqueDictVals(data, responseKey, undefined);\n         let filteredData = data.filter(x => (x[groupKey] == groupVal || groupVal == \"All\") && x[responseKey] != undefined);\n         let countsDict = {}\n         for(let val of responseVals) {\n             countsDict[val] = 0;\n         }\n\n         let total = filteredData.length;\n         filteredData.forEach(x => countsDict[x[responseKey]]++);\n         let propsDict = {};\n         for(let val of responseVals){ \n             propsDict[val] = countsDict[val] / total;\n         }\n         propsDict[\"total\"] = total;\n         return propsDict;\n    },\n\n    getQuestionSorter: function(question) {\n        if(question.sorter) {\n            return $.pivotUtilities.sortAs(question.sorter);\n        }\n        else {\n            return (a, b) => a.localeCompare(b);\n        }\n    },\n\n    getGroupSorter: function(group) {\n        if(group.sorter) {\n            return (a, b) => {\n                if (a == \"All\") return -1;\n                if (b == \"All\") return 1;\n                else return $.pivotUtilities.sortAs(group.sorter)(a, b);\n            }\n        }\n        else {\n            return (a, b) => {\n                if (a == \"All\") return -1;\n                if (b == \"All\") return 1;\n                else return a.localeCompare(b)\n            }\n        }\n    },\n\n    getColorPattern: function(question) {\n        let colorPattern = question.color && typeof(question.color == \"string\")\n        && question.color in Colors ? Colors[question.color] : question.color;\n        if(colorPattern) return colorPattern\n        else return Colors.Categorical\n    },\n\n    analyticsActive : analyticsActive,\n\n    logPageview : (url) => {\n        if(analyticsActive) {\n            ReactGA.set({ page: url});\n            ReactGA.pageview(url);\n        }\n    }\n}\n\nexport default Utils;\n","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport DataView from './DataView'\nimport './../css/CrossTabView.css'\nimport Utils from '../Utils'\n\nexport default class CrossTabView extends React.Component {\n    render() {\n        return <DataView \n                    elementId = \"crosstab\" \n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderCrossTabs }\n                />\n    }\n\n    renderCrossTabs(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map((x) => { return {group : x[selectedGroup.id] || \" No Response\", response : x[selectedQuestion.id] || \" No Response\"} });\n        let groupSorter = Utils.getGroupSorter(selectedGroup);\n        let responseSorter = Utils.getQuestionSorter(selectedQuestion)\n        let sorters = {\n            group : groupSorter,\n            response : responseSorter,\n        }\n        $(`#${elementId}`).pivot(cleanData, \n            {\n                rows : [\"group\"],\n                cols: [\"response\"],\n                aggregator: $.pivotUtilities.aggregators[\"Count\"](),\n                sorters : sorters\n            });\n    }\n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport DataView from './DataView'\nimport Colors from '../Colors'\nimport '../css/ChartView.css'\nimport Utils from '../Utils'\nimport merge from 'deepmerge'\n\nexport default class StackedChartView extends React.PureComponent { \n    render() {\n        return <DataView\n                    elementId = {this.props.elementId || \"chart\"}\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderChart.bind(this) }\n                />\n    }\n\n    renderChart(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map(x => {\n            return {\n                [selectedGroup.id]: x[selectedGroup.id] || \" No response\",\n                [selectedQuestion.id]: x[selectedQuestion.id] || \" No response\"\n            };\n        });\n        let groupSorter = Utils.getGroupSorter(selectedGroup);\n        let responseSorter = Utils.getQuestionSorter(selectedQuestion)\n        let colorPattern = Utils.getColorPattern(selectedQuestion);\n        let groupVals = [\"All\"].concat(Utils.getUniqueDictVals(cleanData, selectedGroup.id, groupSorter));\n        let responseVals = Utils.getUniqueDictVals(cleanData, selectedQuestion.id, responseSorter);\n        let proportions = {}\n        for(let groupVal of groupVals) {\n            proportions[groupVal] = Utils.getProportions(cleanData, selectedGroup.id, \n                groupVal, selectedQuestion.id, responseSorter); \n        }\n        let chartData = responseVals.map(responseVal => {\n            return [responseVal, ... groupVals.map(x => proportions[x][responseVal])]\n        });\n\n        const barWidth = 75;\n        let chart = c3.generate(merge.all([{\n            bindto: `#${elementId}`,\n            data : { \n                columns: chartData,\n                groups : [responseVals],\n                type : \"bar\", \n                order: null\n            },\n            size : {\n                width: $(`#${elementId}`).parent().width()\n            }, \n            color : {\n                pattern : colorPattern || Colors.Categorical\n            },\n            legend : {\n                item : {\n                    onclick : function() {}\n                }, \n                show: false\n            },\n            padding : {\n                left : 150\n            },\n            tooltip: {\n                grouped : false,\n                format : {\n                    name : (name, ratio, id, index) => {\n                        return wrap(name, 60);\n                    },\n                    value : (value, ratio, id, index) => {\n                        let count = proportions[groupVals[index]][\"total\"] * value;\n                        return `${d3.format(\".0%\")(value)} - ${Math.round(count)}`;\n                    }\n                }\n            }, \n            bar : {\n                width:{ \n                    ratio: 0.75\n                }\n\n            }, \n            size : {\n                height: groupVals.length * barWidth\n            },\n            axis : {\n                rotated : true, \n                x : {\n                    type: \"category\", \n                    categories: groupVals\n                }, \n                y : {\n                    // This is some hacky shit to get rid of the 110% display\n                    max: 0.95, \n                    tick : {\n                        values : [0, 0.5, 1], \n                        format: d3.format(\".0%\")\n                    }\n                }\n            }\n        }, this.props.c3Override || {}]));\n        // document.getElementById(elementId).getElementsByTagName(\"p\")[0].remove();\n\n        if(selectedQuestion.correct != undefined) {\n            let bars = document.getElementsByClassName(`c3-target-${selectedQuestion.correct.toString().replace(\" \", \"-\")}`);\n            for(let i = 0; i < bars.length; i++){\n                bars[i].style.setProperty(\"opacity\", \"1.0\", \"!important\");\n            }\n        }\n\n        // some hacky stuff to handle the treatment chart views and adjust the label size.\n        // should try to find some other way to deal with this at some point\n        let ChartLabel = document.getElementById(\"ChartLabel\");\n        if (ChartLabel) {\n            ChartLabel.style.height = document.getElementsByClassName(\"c3-event-rect\")[0].height.baseVal.value + \"px\";\n        }\n        if(this.props.receiveChart) {\n            this.props.receiveChart(chart); \n        }\n    }\n}\n\nconst wrap = (s, w) => s.replace(\n    new RegExp(`(?![^\\\\n]{1,${w}}$)([^\\\\n]{1,${w}})\\\\s`, 'g'), '$1\\n'\n);","import React from 'react'\nimport Utils from '../Utils';\n\nexport default class ChartLegend extends React.PureComponent {\n    render() { \n        if (!this.props.question || !this.props.data) {\n            return null;\n        }\n        let colorPattern = Utils.getColorPattern(this.props.question); \n        let responses = Utils.getUniqueDictVals(this.props.data, this.props.question.id, \n                            Utils.getQuestionSorter(this.props.question));\n        let legendItems = responses.map((val, i) => \n        <div className = \"text-center card unselectable\"\n            onMouseOver={() => {\n                if(this.props.charts){\n                    for(let chart of this.props.charts) {\n                        chart.focus(val);\n                    }\n                }\n            }}\n            onMouseLeave={() => {\n                if(this.props.charts){\n                    for(let chart of this.props.charts) {\n                        chart.revert();\n                    }\n                }\n            }}\n            style = {{\n                color : \"black\",\n                backgroundColor: colorPattern[i % colorPattern.length],\n                fontSize : \"10pt\",\n                minHeight: \"30px\",\n                maxWidth: responses.length > 6 ? \"15%\" : `${(100 / responses.length) - 2}%`,\n                minWidth: responses.length < 6 ? \"18%\" : \"15%\",\n                padding: \"3px\",\n                paddingLeft: \"10px\",\n                paddingRight: \"10px\",\n                marginLeft: i % 6 == 0 ? \"auto\" : \"3px\", \n                marginRight: (i + 1) % 6 == 0 || i == responses.length - 1 ? \"auto\" : \"3px\",\n                marginTop: \"10px\",\n                marginBottom: \"20px\",\n                opacity : val.trim() == this.props.question.correct ? 1.0 : 0.8,\n                fontWeight : val.trim() == this.props.question.correct ? 900 : undefined,\n                textDecoration : val.trim() == this.props.question.correct ? \"underline\" : undefined\n        }}>\n            <strong>{val}</strong>\n        </div>)\n        return <div className = \"row legend\" style={{marginLeft: \"auto\", marginRight: \"auto\", width:\"100%\"}}>\n            {legendItems}\n        </div>\n    }\n}","import React from 'react'\n\nexport default class CorrectDisplay extends React.PureComponent {\n    render() {\n        if (!this.props.question || (!this.props.question.correct && !this.props.question.correct_text)) {\n            return null;\n        }\n        let formatter =  this.props.formatter || (x => x);\n        let sourceText = null; \n        if(this.props.question.source) {\n            if(Array.isArray(this.props.question.source)){\n                if(this.props.question.source_url && (!Array.isArray(this.props.question.source_url) || this.props.question.source_url.length != this.props.question.source.length)) {\n                    throw new Error(\"Both source and source_url must be arrays of same length\")\n                }\n                let sources = this.props.question.source.map((src, i) => {\n                    if (this.props.question.source_url[i]){\n                        return <a href = {this.props.question.source_url[i]} target = \"_blank\">{src}</a>;\n                    }\n                    else {\n                        return src;\n                    }\n                }).reduce((acc, cur) => [acc, \", \", cur]);\n                sourceText = <span>Source: {sources}</span>\n            }\n            else {\n                if (this.props.question.source_url) {\n                    sourceText = <span>Source: <a href = {this.props.question.source_url} target = \"_blank\">{this.props.question.source}</a></span>\n                }\n                else{\n                    sourceText = <span>Source: {this.props.question.source}</span>\n                }\n            }\n            }\n        let correctText = this.props.question.correct_text || formatter(this.props.question.correct);\n        return <div className = \"header\">\n            <span>\n                <strong style={{color:\"green\", fontSize:\"14pt\"}}>Correct Answer: {correctText}</strong><br/>\n                <em style={{fontSize:\"9pt\", verticalAlign: \"top\"}}>\n                    {sourceText ? sourceText : null}\n                </em>\n            </span>\n        </div>\n    }\n}","import React from 'react'\nimport CrossTabView from './CrossTabView'\nimport StackedChartView from './StackedChartView'\nimport ChartLegend from './ChartLegend'\nimport CorrectDisplay from './CorrectDisplay'\nimport '../css/CategoricalDisplay.css'\n\nexport default class CategoricalDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showTable : false\n        }\n        this.receiveChart = this.receiveChart.bind(this);\n    }\n    render() {\n        if(!this.props.question || !this.props.group) {\n            return null;\n        }\n        return (\n            <div className = \"CategoricalDisplay\">\n                <div className = \"row header\">\n                    <span>\n                    Proportion of responses to:<br/><strong>{this.props.question.description || this.props.question.title}</strong> <br/> <br/> \n                    By <strong>{this.props.group.title}</strong></span>\n                </div>\n                <div className = \"row\">\n                    <CorrectDisplay question = {this.props.question} />\n                </div>\n                <div className = \"row\" style = {{paddingLeft:\"20px\"}}>\n                    <ChartLegend \n                        data = { this.props.data }\n                        question = { this.props.question }\n                        charts = { [this.state.chart] }\n                    />\n                </div>\n                <div className = \"row\">\n                    <StackedChartView\n                        survey = { this.props.survey } \n                        data = { this.props.data }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                        receiveChart = { this.receiveChart }\n                    />\n                </div>\n\n                <div className = \"row text-center\">\n                    <button onClick = {this.toggleTable.bind(this)} className = \"card toggleButton\">\n                        {this.state.showTable ? \"Hide\" : \"Show\"} answer distribution table\n                    </button>\n                </div>\n                <div className = \"row\" style = {{minHeight: \"50px\", marginBottom: \"30px\"}}>\n                    { this.state.showTable ? \n                        <CrossTabView\n                            survey = { this.props.survey } \n                            data = { this.props.data }\n                            selectedGroup = { this.props.group }\n                            selectedQuestion = { this.props.question }\n                        /> : null\n                    } \n                </div>\n            </div>\n        )\n    }\n\n    receiveChart(chart) {\n        this.setState({\n            chart : chart\n        })\n    }\n\n    toggleTable() {\n        this.setState ({ \n            showTable : !this.state.showTable\n        });\n    }\n\n    cleanData(data) {\n        return data; \n    }\n}","import React from 'react'\nimport '../css/StatBubble.css'\n\nexport default class StatBubble extends React.PureComponent { \n    render() { \n    let style = this.props.title == \"All\" ? { textDecoration : \"underline\" } : {};\n    let classNames = \"StatBubble text-center card h-100 \" + (this.props.active ? \"activeBubble\" : \"\");\n        return (\n            <a href=\"#\" className = {classNames} onClick = { (e) => {e.preventDefault(); this.props.handleClick()}}>\n                <strong className = \"BubbleTitle\" style = {style}>{this.props.title == \"All\" ? this.props.title.toUpperCase() : this.props.title}</strong>\n                {\n                    this.props.stat ? \n                    (this.props.formatter ? this.props.formatter(this.props.stat.toFixed(0)) : this.props.stat.toFixed(0)) :\n                    null\n                }\n            </a>\n        )\n    }\n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport DataView from './DataView'\nimport Colors from '../Colors'\nimport '../css/HistogramView.css'\n\nexport default class HistogramView extends React.Component { \n    constructor() {\n        super();\n        this.renderHistogram = this.renderHistogram.bind(this);\n    }\n    render() {\n        return (\n        <div style={{width: \"100%\"}}> \n            <h5 className = \"text-center\">\n                Distribution of responses by group: <strong>{this.props.groupVal}</strong>\n            </h5>\n            <DataView\n                elementId = \"histogram\"\n                survey = { this.props.survey }\n                data = { this.props.data }\n                selectedGroup = { this.props.selectedGroup }\n                selectedQuestion = { this.props.selectedQuestion }\n                renderFunction = { this.renderHistogram }\n            />\n        </div>\n        )\n    }\n\n    shouldComponentUpdate(nextProps, nextState) { \n        if(nextProps.selectedGroup != this.props.selectedGroup || nextProps.selectedQuestion != this.props.selectedQuestion) {\n            this.chart = null;\n        }\n        return true;\n    }\n\n    renderHistogram(elementId, selectedGroup, selectedQuestion, data) {\n        let dataNumeric = data.map(x => Number(x[selectedQuestion.id]));\n        let cleanData = data.filter(x => this.props.groupVal === \"All\" || x[selectedGroup.id] == this.props.groupVal)\n                            .map(x => Number(x[selectedQuestion.id]));\n\n        let nticks = selectedQuestion.nticks ? selectedQuestion.nticks : 15;\n        let correctList = selectedQuestion.correct ? [selectedQuestion.correct] : [];\n        let dataWithCorrect = dataNumeric.concat(correctList);\n        let minValue = selectedQuestion.min_val || d3.min(dataWithCorrect);\n        let maxValue = selectedQuestion.max_val || d3.max(dataWithCorrect)\n        let scale = d3.scaleLinear()\n                        .domain([minValue, maxValue])\n                        .range([minValue, maxValue]);\n\n        let histogram = d3.histogram()\n                            .domain([minValue, maxValue])\n                            .thresholds(scale.ticks(nticks));\n        \n        let bins = histogram(cleanData);\n        for(var i = 0; i < bins.length - 1; i++){\n            bins[i][\"x1\"] -= 1;\n        }\n        let binSizes = bins.map(x => x.length);\n        if (bins[bins.length - 1][\"x0\"] == bins[bins.length - 1][\"x1\"]) {\n            binSizes[bins.length - 2] += binSizes[bins.length - 1];\n            bins[bins.length - 2][\"x1\"] = bins[bins.length - 1][\"x0\"];\n            bins.pop();\n            binSizes.pop();\n        }\n        else {\n            bins[bins.length - 1][\"x1\"] = bins[bins.length - 1][\"x0\"] + (bins[bins.length - 2][\"x1\"] - bins[bins.length - 2][\"x0\"]) + 1;\n        }\n        let categories = bins.map(bin => `${bin[\"x0\"]}-${bin[\"x1\"]}`);\n        let correctBin = selectedQuestion.correct ? bins.filter(bin => selectedQuestion.correct >= bin[\"x0\"] && selectedQuestion.correct <= bin[\"x1\"])[0] : null;\n        if(!this.chart) {\n            this.chart = c3.generate({\n                bindto: `#${elementId}`,\n                data : {\n                    columns : [['count', ... binSizes]],\n                    types : { \n                        'count' : 'bar'\n                    }\n                },\n                grid : {\n                    x: {\n                        lines : (correctBin ? \n                                [{\n                                    value : `${correctBin[\"x0\"]}-${correctBin[\"x1\"]}`, \n                                    text : `Correct: ${selectedQuestion.correct_text || this.props.formatter(selectedQuestion.correct)}`, \n                                    class: \"correct_line\",\n                                    position: \"middle\", \n                                }\n                                ] : [])\n                    },\n                },\n                color : {\n                    pattern : Colors.Histogram\n                }, \n                axis : {\n                    x : {\n                        type : 'category',\n                        categories : categories\n                    }\n                },\n                bar: {\n                    width: {\n                        ratio: 1\n                    }\n                },\n                legend : {\n                    show : false\n                }\n            });\n        }\n        else {\n            this.chart.load({\n                columns : [['count', ... binSizes]]\n            })\n        }\n    }\n}","const NumberFormats = { \n    percent : s => `${s}%`,\n    dollar : s => `$${s}`\n}\n\nexport default NumberFormats","import React from 'react'\nimport StatBubble from './StatBubble'\nimport '../css/NumericDisplay.css'\nimport HistogramView from './HistogramView'\nimport NumberFormats from '../NumberFormats'\nimport Utils from '../Utils'\nimport CorrectDisplay from './CorrectDisplay'\n\nexport default class NumericDisplay extends React.Component {\n    constructor() { \n        super();\n        this.state = {\n            selectedGroupVal : \"All\"\n        };\n    }\n    render() { \n        if(!this.props.question || !this.props.group) {\n            return null;\n        }\n        let data = this.cleanData(this.props.data);\n        let averages = this.calcAverages(data).sort((a, b) => Utils.getGroupSorter(this.props.group)(a.groupVal, b.groupVal));\n        let formatter = NumberFormats[this.props.question.format] || (x => x);\n        let statBubbles = averages.map(x => \n            <div className = \"col-md-3\" style={{marginBottom : \"10px\"}}>\n                <StatBubble \n                    title = { x.groupVal }\n                    stat = { x.average }\n                    active = { x.groupVal == this.state.selectedGroupVal }\n                    handleClick = { this.createClickHandler(x.groupVal) }\n                    formatter = { formatter }\n                />\n            </div>\n        );\n        return (\n            <div className = \"NumericDisplay\">\n                <div className = \"row header\">\n                    <span>Average response to:<br/><strong>{this.props.question.description}</strong>\n                    <br/><br/>\n                    By <strong>{this.props.group.title}</strong></span>\n                </div>\n                <div className = \"row\">\n                    <CorrectDisplay question ={this.props.question} formatter = {formatter} />\n                </div>\n                <div className = \"row\">\n                    { statBubbles }\n                </div>\n                <div className = \"row\">\n                    <HistogramView\n                        survey = { this.props.survey } \n                        data = { this.cleanData(this.props.data) }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                        groupVal = { this.state.selectedGroupVal }\n                        formatter = {formatter}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            selectedGroupVal : \"All\"\n        })\n    }\n\n    cleanData(data) {\n        let filteredData = data.filter(x => x[this.props.group.id] && x[this.props.question.id]);\n        let sortedData = filteredData.sort((a, b) => a[this.props.question.id] - b[this.props.question.id]);\n        return filteredData.filter(x => sortedData.indexOf(x) <= 0.95 * sortedData.length);\n    }\n    \n    createClickHandler(groupVal) {\n        return function() {\n            this.setState({\n                selectedGroupVal : groupVal\n            });\n        }.bind(this);\n    }\n    \n    calcAverages(data) {\n        let acc = {\n            All : {\n                sum : 0,\n                count : 0\n            }\n        }\n        let groupId = this.props.group.id;\n        let questionId = this.props.question.id;\n        for(let row of data) {\n            let groupVal = row[groupId];\n            if(!(groupVal in acc)) {\n                acc[groupVal] = {sum : 0, count : 0}\n            }\n            acc.All.sum += Number(row[questionId]);\n            acc.All.count++;\n            acc[groupVal].sum += Number(row[questionId]);\n            acc[groupVal].count++; \n        }\n        \n        return Object.keys(acc).map(k => { \n            return {groupVal : k, average : acc[k].count > 0 ? acc[k].sum / acc[k].count : 0}\n        })\n    }\n}","import React from 'react'\nimport StackedChartView from './StackedChartView'\n\nexport default class TreatmentChartView extends React.PureComponent {\n    render() { \n        let c3Overrides = { \n            axis : {\n                x : {\n                    show : false\n                }, \n                y : {\n                    show : false,\n                    max : 0.9\n                }\n            },\n            padding : {\n                left: 0\n            }\n        }\n\n        return <StackedChartView \n            survey = { this.props.survey } \n            data = { this.props.data }\n            selectedGroup = { this.props.selectedGroup }\n            selectedQuestion = { this.props.selectedQuestion }\n            elementId = { this.props.elementId }\n            c3Override = { c3Overrides }\n            receiveChart = { this.props.receiveChart }\n        />\n    }\n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport Utils from '../Utils'\n\nexport default class DummyChartView extends React.Component {\n    render() { \n        let c3Overrides = { \n            axis : {\n                x : {\n                    show : true\n                }, \n                y : {\n                    show : false\n                }\n            }, \n            color: { \n                pattern : [\"#ffffff\"]\n            },\n            tooltip : {\n                show: false\n            },\n        }\n\n        let sorter = null;\n        if(this.props.selectedGroup.sorter) {\n            sorter = $.pivotUtilities.sortAs(this.props.selectedGroup.sorter);\n        }\n        else {\n            sorter = (a, b) => a.localeCompare(b);\n        }\n\n        let displayElts = [\"All\", ...Utils.getUniqueDictVals(this.props.data, this.props.selectedGroup.id, sorter)]\n                            .map(x => <tr style={{overflow: \"hidden\"}}><td><strong>{x}</strong></td></tr>);\n\n        return <table id = \"ChartLabel\" style={{marginTop: \"2%\"}}>\n            <tbody style={{fontSize : \"12px\"}}>\n                {displayElts}\n            </tbody>\n        </table>\n\n        /* return <ChartView \n            survey = { this.props.survey } \n            data = { this.props.data }\n            selectedGroup = { this.props.selectedGroup }\n            selectedQuestion = { this.props.selectedQuestion }\n            elementId = { this.props.elementId }\n            c3Override = { c3Overrides }\n        />*/ \n    }\n    \n    componentDidMount() {\n        this.componentDidUpdate();\n    }\n\n    componentDidUpdate() {\n        /* let chartElement = document.getElementById(this.props.elementId);\n        let legendItems = chartElement.getElementsByClassName(\"c3-legend-item\");\n        for(let item of legendItems) {\n            item.style.display = \"none\";\n        }\n\n        chartElement.getElementsByClassName(\"c3-chart\")[0].style.display = \"none\";\n        chartElement.getElementsByClassName(\"domain\")[0].style.display = \"none\";\n        let lines = chartElement.getElementsByTagName(\"line\");\n        for(let line of lines) {\n            line.style.display = \"none\";\n        }\n        \n        chartElement.getElementsByClassName(\"c3-axis-x-label\")[0].style.display = \"none\";\n\n        chartElement.getElementsByClassName(\"c3-axis-x\")[0].setAttribute(\"style\", \"font-weight: bold\"); */\n    }\n}","import React from 'react'\nimport TreatmentChartView from './TreatmentChartView'\nimport ScrollableDesc from './ScrollableDesc'\nimport DummyChartView from './DummyChartView'\nimport ChartLegend from './ChartLegend'\nimport Utils from '../Utils';\n\nexport default class TreatmentDisplay extends React.Component { \n    constructor(props) {\n        super(props);\n        this.state = {\n            charts : [] \n        };\n        this.charts = []\n        this.receiveChart = this.receiveChart.bind(this);\n    }\n\n    render() {\n        if(!this.props.question || !this.props.group) {\n            this.charts = []\n            return null;\n        }\n        // Ugh, more hacky shit. \n        // Basically we need to adjust the column size based on how many treatment groups there are\n        // But bootstrap is too stupid to figure it out by itself\n        let columnWidth = `col-md-${10 - 2 * this.props.question.questions.length}`;\n        let chartViews = this.props.question.questions.map(question => \n            <div className = {columnWidth} style = {{paddingLeft: '0px'}}>\n                <TreatmentChartView\n                    survey = { this.props.survey } \n                    data = { this.props.data.filter(x => question.treatments.indexOf(x[\"mechanisms_rando\"]) >= 0) }\n                    selectedGroup = { this.props.group }\n                    selectedQuestion = { {color: this.props.question.color, sorter: this.props.question.sorter, ...question} }\n                    elementId = {`${question.title}_chart`}\n                    receiveChart = {this.receiveChart}\n                />\n            </div>\n        )\n\n        let colorPattern = Utils.getColorPattern(this.props.question);\n\n        let descriptions = this.props.question.questions.map(question => \n            <div className = {columnWidth} style={{paddingRight: 40}}>\n                <ScrollableDesc\n                    title = {question.title}\n                    content = {question.description}\n                    maxHeight = {\"140px\"}\n                />\n            </div>\n            )\n        return(\n            <div className = \"TreatmentDisplay\">\n                <div className = \"row header\">\n                    <span>\n                        Responses to: <br/> \n                        <strong>{this.props.question.title}</strong> <br/><br/>\n\n                        Grouped by <strong>{this.props.group.title}</strong> <br/><br/>\n\n                        Separated by randomized question wording.\n\n                    </span>\n                </div>\n                <div className = \"row\" >\n                    <div className = \"col-md-3\"></div>\n                    <div className = \"col-md-9\" style={{paddingLeft: \"0px\"}}>\n                        <ChartLegend \n                            data = { this.props.data }\n                            question = { this.props.question }\n                            charts = { this.state.charts }\n                        />\n                    </div>\n                </div>\n                <div className = \"row\">\n                    <div className = \"col-md-3\">\n                        <strong style = {{position: \"absolute\", bottom: \"0\", marginLeft: \"-20px\"}}>{this.props.group.title}</strong>\n                    </div>\n                    <div className = \"col-md-9\">\n                        <div className = \"row\">\n                            {descriptions}\n                        </div>\n                    </div>\n                </div>\n                <div className = \"row\">\n                    <div className = \"col-md-3\">\n                        <DummyChartView \n                            survey = { this.props.survey } \n                            data = { this.props.data }\n                            selectedGroup = { this.props.group }\n                            selectedQuestion = { this.props.question }\n                            elementId = {`dummy_chart`}\n                        />\n                    </div>\n                    <div className = \"col-md-9\">\n                        <div className = \"row\">\n                            {chartViews}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    receiveChart(chart) {\n        this.charts.push(chart);\n        if(this.charts.length == this.props.question.questions.length) {\n            this.setState({\n                charts : this.charts\n            })\n        }\n    }\n}","import React from 'react'\n\nexport default class ImageView extends React.PureComponent {\n    render() {\n        return <div className = \"ImageView text-center\">\n            <img src={`${process.env.PUBLIC_URL}/images/${this.props.question.img_url}`}\n                style = {{\n                    maxWidth: \"75%\",\n                    height: \"auto\"\n                }}\n            />\n        </div>\n    }\n}","import React from 'react'\nimport ImageView from './ImageView'\n\nexport default class WordcloudDisplay extends React.Component { \n    render() { \n        return (\n        <div className = \"Wordcloud Display\">\n            <div className = \"row header \">\n                <h5>{this.props.question.description}</h5>\n            </div>\n\n            <div className = \"row\">\n                <ImageView \n                    question = {this.props.question}\n                />\n            </div>\n        </div>\n        )\n    }\n}","import React from 'react'\nimport StatBubble from './StatBubble'\nimport DataDisplay from './DataDisplay'\n\nexport default class UmbrellaDisplay extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            question : undefined\n        }\n    }\n    render() {\n        if(!this.props.group) {\n            return null;\n        }\n        let subquestions = this.props.question.questions;\n        let selectedQuestion = this.state.question && subquestions.some(x => x.id == this.state.question.id) ? this.state.question : subquestions[0];\n        if(subquestions == undefined) {\n            throw new Error(\"No subquestions for Umbrella display\")\n        }\n        let bubbles = subquestions.map(question => \n            <div className = \"col-md-3\" style={{marginBottom : \"10px\"}}>\n                <StatBubble\n                    title = { question.title }\n                    active = { question == selectedQuestion }\n                    handleClick = { (() => this.handleClick(question)).bind(this) }\n                />\n            </div>    \n        )\n\n        return (\n            <div className = \"UmbrellaDisplay\">\n                <div className = \"row header\">\n                    <span>{ this.props.question.description }</span>\n                </div>\n                <div className = \"row\">\n                    { bubbles }\n                </div>\n                <DataDisplay\n                    data = { this.props.data }\n                    selectedGroup = { this.props.group }\n                    selectedQuestion = { selectedQuestion }\n                />\n            </div>\n        )\n    }\n\n    handleClick(question) {\n        this.setState({\n            question : question\n        });\n    }\n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport DataView from './DataView'\nimport Colors from '../Colors'\nimport '../css/ChartView.css'\nimport Utils from '../Utils'\nimport merge from 'deepmerge'\n\nexport default class FrequencyChartView extends React.PureComponent { \n    render() {\n        return <DataView\n                    elementId = {this.props.elementId || \"chart\"}\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderChart.bind(this) }\n                />\n    }\n\n    renderChart(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map(x => {\n            return {\n                [selectedQuestion.id]: x[selectedQuestion.id] || \" No response\"\n            };\n        });\n        let responseSorter = Utils.getQuestionSorter(selectedQuestion)\n        let colorPattern = Utils.getColorPattern(selectedQuestion);\n        let responseVals = Utils.getUniqueDictVals(cleanData, selectedQuestion.id, responseSorter);\n        let counts = Utils.getCounts(data, selectedQuestion.id);\n\n        const barWidth = 75;\n        let chart = c3.generate(merge.all([{\n            bindto: `#${elementId}`,\n            data : { \n                columns: [\n                    [\"count\", ... responseVals.map(x => counts[x])]\n                ],\n                type : \"bar\", \n            },\n            size : {\n                width: $(`#${elementId}`).parent().width()\n            }, \n            color : {\n                pattern : colorPattern || Colors.Categorical\n            },\n            legend : {\n                item : {\n                    onclick : function() {}\n                }, \n                show: false\n            },\n            padding : {\n                left : 200\n            },\n            tooltip: {\n                grouped : false\n            }, \n            bar : {\n                width:{ \n                    ratio: 0.8\n                }\n            }, \n            size : {\n                height: responseVals.length * barWidth\n            },\n            axis : {\n                rotated : true, \n                x : {\n                    type: \"category\", \n                    categories: responseVals.map(x => x.replace(\"-\", \" - \"))\n                }\n            },\n        }, this.props.c3Override || {}]));\n    }\n}","import React from 'react'\nimport FrequencyChartView from './FrequencyChartView'\nimport '../css/CategoricalDisplay.css'\nimport fields from '../config/fields.json'\nimport StatBubble from './StatBubble'\n\nexport default class FrequencyDisplay extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedSurvey : \"All\"\n        };\n    }\n    render() {\n        if(!this.props.question) {\n            return null;\n        }\n        let surveyNames = [\"All\", \"Income Tax\", \"Estate Tax\", \"Health Insurance\", \"Trade Policy\"];\n        let bubbles = surveyNames.map(survey => \n            <div className = \"col-md-3\" style={{marginBottom : \"10px\"}}>\n                <StatBubble \n                    title = { survey }\n                    active = { survey == this.state.selectedSurvey}\n                    handleClick = { (() => this.setState({selectedSurvey : survey})).bind(this) }\n                />\n            </div>\n        );\n        \n        let filteredData = this.props.data.filter(x => this.state.selectedSurvey == \"All\" ||\n                                                    x.survey == this.state.selectedSurvey);\n        return (\n            <div className = \"FrequencyDisplay\">\n                <div className = \"row header\">\n                    <span>Distribution of responses to:\n                    <br/><strong>{this.props.question.description || this.props.question.title}</strong>\n                    <br/> <br/>\n                    Among {this.state.selectedSurvey.toLowerCase()} respondents. \n                    </span>\n                </div>\n                <div className = \"row\">\n                    { bubbles }\n                </div>\n                <div className = \"row\">\n                    <FrequencyChartView\n                        survey = { this.props.survey } \n                        data = { filteredData }\n                        selectedQuestion = { this.props.question }\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    cleanData(data) {\n        return data; \n    }\n}","import React from 'react'\nimport '../css/DataDisplay.css'\nimport DataType from '../DataType'\nimport CategoricalDisplay from './CategoricalDisplay'\nimport NumericDisplay from './NumericDisplay'\nimport TreatmentDisplay from './TreatmentDisplay'\nimport WordcloudDisplay from './WordcloudDisplay'\nimport UmbrellaDisplay from './UmbrellaDisplay'\nimport FrequencyDisplay from './FrequencyDisplay'\n\nexport default class DataDisplay extends React.Component {\n    render() {\n        let question = this.props.selectedQuestion;\n        let specificDisplay = null;\n        if(!question) {\n            return null;\n        }\n        switch(question.type) {\n            case DataType.CATEGORICAL:\n                specificDisplay = <CategoricalDisplay \n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.NUMERIC:\n                specificDisplay = <NumericDisplay\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.FREQUENCY:\n                specificDisplay = <FrequencyDisplay \n                    data = { this.props.data }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.TREATMENT:\n                specificDisplay =  <TreatmentDisplay\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.WORDCLOUD:\n                specificDisplay = <WordcloudDisplay\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.UMBRELLA:\n                specificDisplay = <UmbrellaDisplay \n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            default: \n                throw new Error(`Invalid data type for ${ this.props.selectedQuestion.id}`)\n\n        }\n        return (\n            <div className = \"DataDisplay\">\n                { specificDisplay }\n                <div style = {{height: 100}}></div>\n            </div>\n        )\n    }\n     \n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport FieldSelect from './FieldSelect'\nimport { surveys, groups } from '../config/fields.json'\nimport NotFound from './NotFound'\nimport DataDisplay from './DataDisplay'\nimport incomeSurveyData from './../json_data/data_income.json'\nimport tradeSurveyData from './../json_data/data_trade.json'\nimport estateSurveyData from './../json_data/data_estate.json'\nimport healthSurveyData from './../json_data/data_health.json'\nimport DataType from '../DataType'\nimport Utils from '../Utils'\n\nfunction addSurveyType(data, survey_id) {\n    data.forEach(x => x[\"survey\"] = survey_id)\n}\n\naddSurveyType(incomeSurveyData, \"Income Tax\");\naddSurveyType(tradeSurveyData, \"Trade Policy\");\naddSurveyType(estateSurveyData, \"Estate Tax\");\naddSurveyType(healthSurveyData, \"Health Insurance\");\n\nconst surveyData = {\n    \"income_survey\" : incomeSurveyData,\n    \"trade_survey\" : tradeSurveyData, \n    \"estate_survey\" : estateSurveyData,\n    \"health_survey\" : healthSurveyData,\n    \"pooled\" : incomeSurveyData.concat(tradeSurveyData, estateSurveyData, healthSurveyData)\n};\n\n\n// Datatypes that should not allow groups\nconst noGroupTypes = [\n    DataType.KEYNESS,\n    DataType.WORDCLOUD,\n    DataType.MULTICHOICE,\n    DataType.FREQUENCY\n]\n\n\nexport default class DataPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n        this.params = new URLSearchParams(props.history.search); \n        this.updateURL = this.updateURL.bind(this);\n        this.handleGroupSelect = this.handleGroupSelect.bind(this);\n        this.handleTopicSelect = this.handleTopicSelect.bind(this);\n        this.handleQuestionSelect = this.handleQuestionSelect.bind(this); \n    }\n    componentWillMount() {\n        this.surveyId = this.props.surveyId;\n        if (this.surveyId && this.surveyId in surveys) {\n            this.survey = surveys[this.surveyId];\n        }\n        this.groups = {...groups, ... (this.survey.additionalGroups || {})}\n    }\n\n    componentDidMount() {\n        document.title = `${this.survey.title} - Understanding Economics`;\n    }\n\n    render() {\n        if(!this.survey) {\n            return <NotFound />\n        }\n        let trackingUrl = this.props.history.location.pathname + this.props.history.location.search;\n        Utils.logPageview(trackingUrl);\n        this.params = new URLSearchParams(this.props.history.location.search); \n        let selectedGroup = this.getGroup();\n        let selectedTopic = this.getTopic();\n        let selectedQuestion = this.getQuestion();\n\n        return (\n            <div className = \"container-fluid\">\n                <div className = \"row\">\n                    <div className = \"col-md-4\">\n                        <FieldSelect\n                            title = \"Topic\"\n                            description = \"Select a topic that you would like to examine\"\n                            options = { this.survey.topics }\n                            selected = {selectedTopic ? selectedTopic.id : undefined}\n                            handleSelect = {this.handleTopicSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-4\">\n                        <FieldSelect\n                            title = \"Question\"\n                            description = \"Select a question to examine\"\n                            options = {selectedTopic ? \n                                selectedTopic.questions :\n                                null\n                            }\n                            selected = {selectedQuestion ? selectedQuestion.id : undefined}\n                            handleSelect = {this.handleQuestionSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-4\">\n                        {\n                            this.displayGroupSelect(selectedTopic, selectedQuestion, selectedGroup) ?\n                            <FieldSelect \n                                title = \"Group by\"\n                                description = \"Select how you would like to group responses\"\n                                options = { this.groups }\n                                selected = {selectedGroup ? selectedGroup.id : undefined}\n                                handleSelect = {this.handleGroupSelect}\n                            />\n                            : null\n                        }\n                    </div> \n                </div>\n                <div style={{minHeight: 500}}>\n                    <DataDisplay\n                        data = { surveyData[this.surveyId] }\n                        selectedGroup = { selectedGroup }\n                        selectedQuestion = { selectedQuestion } \n                    />\n                </div>\n            </div>\n        )\n    }\n    // decide whether to display the group\n    displayGroupSelect(selectedTopic, selectedQuestion, selectedGroup) {\n        if (!selectedTopic) {\n            return false;\n        }\n        if(!selectedQuestion && !selectedGroup) {\n            return false;\n        }\n        if (selectedQuestion && selectedQuestion.type && noGroupTypes.includes(selectedQuestion.type)){\n            return false;\n        } \n        return true\n    }\n\n    updateURL() {\n        this.props.history.push({\n            search : this.params.toString()\n        })\n    }\n\n    handleGroupSelect(value) {\n        this.params.set(\"group\", this.groups[value].id)\n        this.updateURL();\n    }\n\n    handleTopicSelect(value) {\n        this.params.set(\"topic\", this.survey.topics[value].id);\n        this.params.delete(\"question\")\n        if(Object.values(this.survey.topics[value].questions).filter(q => !noGroupTypes.includes(q.type)).length == 0) {\n            this.params.delete(\"group\");\n        }\n        this.updateURL();\n    }\n\n    \n    handleQuestionSelect(value) {\n        let selectedQuestion = this.getTopic().questions[value];\n        let selectedGroup = noGroupTypes.includes(selectedQuestion.type) ?\n        null : this.getGroup();\n        this.params.set(\"question\", selectedQuestion.id);\n        if(selectedGroup) {\n            this.params.set(\"group\", selectedGroup.id);\n        }\n        else {\n            this.params.delete(\"group\");\n        }\n        this.updateURL();\n    }\n\n    getTopic() { \n        let selectedTopicId = this.params.get(\"topic\");\n        return selectedTopicId in this.survey.topics ? this.survey.topics[selectedTopicId] : undefined;\n    }\n    \n    getGroup() {\n        let selectedGroupId = this.params.get(\"group\");\n        return selectedGroupId in this.groups ? this.groups[selectedGroupId] : undefined;\n    }\n\n    getQuestion() {\n        let selectedTopic = this.getTopic();\n        let selectedQuestionId = this.params.get(\"question\");\n        return selectedTopic && selectedQuestionId in selectedTopic.questions ? selectedTopic.questions[selectedQuestionId] : undefined;\n    }\n}\n\nDataPage.propTypes = {\n    survey : PropTypes.object\n}","import React from 'react'\nimport \"../css/DemoImage.css\"\n\nexport default class DemoImage extends React.PureComponent {\n    render() {\n        return <img \n            src = {process.env.PUBLIC_URL + \"/demo_images/\" + this.props.src}\n            className = \"demoImage\"\n        />\n    }\n}","import React from 'react'\n\nexport class Section extends React.PureComponent {\n    render() {\n        return <h3 style ={{marginBottom: \"10px\"}}>{this.props.children}</h3>\n    }\n}\n\nexport class Subsection extends React.PureComponent { \n    render() {\n        return <h4 style = {{marginBottom: 10, marginTop: 20}}>{this.props.children}</h4>\n    }\n}\n\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport default class HighlightBlock extends React.PureComponent {\n    render() {\n        return <div className = \"col-3\" style ={{marginRight: -10, minWidth: 200}}>\n            <NavLink to = {this.props.url}>\n                <div className = \"text-center card h-100\"\n                    style = {{\n                        padding : 10,\n                        borderColor : this.props.color,\n                        borderWidth: 10\n                    }}\n                >\n                    <span style = {{marginTop: \"auto\", marginBottom: \"auto\"}}>\n                            <strong style={{color: \"dimgray\"}}>\n                                {this.props.text}\n                            </strong>\n                    </span>\n                </div>\n            </NavLink>\n        </div>\n    }\n}","import React from 'react'\nimport HighlightBlock from './HighlightBlock' \nimport Colors from '../Colors'\nimport highlights from '../config/highlights.json'\n\n\nexport default class HighlightBar extends React.PureComponent{\n    render() {\n        let highlightBlocks = highlights.map((highlight, i) => \n            <HighlightBlock \n                url = {highlight.url}\n                text = {highlight.text}\n                color = {Colors.Gradient5[i % 5]}\n            />);\n        return <div class=\"container-fluid\">\n            <div className = \"row flex-row flex-nowrap\" style = {{\n                marginTop: 10,\n                marginBottom: 10,\n                paddingTop: 10,\n                paddingBottom: 10,\n                borderWidth: 2,\n                borderRadius: 5,  \n                borderStyle: 'solid',\n                borderColor: 'grey', \n                overflowX: \"scroll\"}}>\n                {highlightBlocks}\n            </div> \n        </div>\n    }\n}","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport default class ResetLink extends React.PureComponent {\n    render() {\n        return <NavLink to = {this.props.to} onClick = {() => window.scrollTo(0, 0)}>\n            {this.props.children}\n        </NavLink>\n    }\n}","import React from 'react'\nimport DemoImage from './DemoImage'\nimport { Section } from './TextComponents'\nimport Utils from '../Utils'\nimport HighlightBar from './HighlightBar'\nimport { NavLink } from 'react-router-dom'\nimport ResetLink from './ResetLink'\n\nexport default class HomePage extends React.Component {\n    // NOTE: \n    // Make a tab \"About\" with [link to SS website].\n    render() {\n        document.title = \"Understanding Economics\";\n        let trackingUrl = \"/\";\n        Utils.logPageview(trackingUrl);\n        return (\n            <div className = \"HomePage\">\n                <h2 style = {{marginBottom : \"20px\"}}>Welcome to the Understanding Economics Project!</h2>\n                <img src = {`${process.env.PUBLIC_URL}/home_images/cargo.jpeg`} style={{height: \"250px\", marginBottom: \"20px\"}}/>\n\n                <Section>Project</Section>\n\n                <p>\n                The goal of this project is to understand better what people know and learn about economic policies, how they reason about them, and how their support for different policies is determined. \n                </p>\n\n                <p>\n                This website makes the full survey data from this project easy to access and analyze. \n                </p>\n\n                <p>\n                You can explore four big policy issues: <ResetLink to = \"/survey/income_survey\">Income Tax</ResetLink>, <ResetLink to = \"/survey/estate_survey\">Estate Tax</ResetLink>, <ResetLink to =\"/survey/health_survey\">Health Insurance</ResetLink>, and <ResetLink to =\"/survey/trade_survey\">Trade Policy</ResetLink>. Click on the tab above that you are interested in to explore the data.\n                </p>\n                <Section>Highlights</Section>\n                Jump right into the data by taking a look at some of the questions that we thought were really interesting! You can also learn more about how the website works below.\n                <HighlightBar />\n                <Section>How does this website work?</Section>\n\n                <p>\n                This website was designed to enable you to explore and display how the answers to all survey questions are distributed for different categories of population (e.g.: by groups of income, by states in the U.S., by age groups, etc)\n                </p>\n\n                <p>\n                First choose a big issue policy from the tabs above:\n                </p>\n\n                <DemoImage src = \"tabs.png\"/>\n                \n                <p>Then, choose a topic area that you are interested in exploring:</p>\n                \n                <DemoImage src = \"topic.png\" />\n                \n                <p>Choose a specific question within that topic for which you would like to see responses: </p> \n\n                <DemoImage src = \"question.png\"/>\n                \n                <p>Finally, choose a demographic group by which you'd like to see answers to the question organized</p>\n\n                <DemoImage src =\"groupby.png\"/>\n\n                <p>You can explore as many topics, questions, and groups as you'd like. </p>\n\n                <p>\n                Some questions have several formulations (Generic, You, and Gender), which were randomized across respondents in order to compare how people's responses are changed when we change the way we ask the question. \n                </p>\n\n                <p>\n                More information about the project and the surveys can be found <a href = \"https://stefanie-stantcheva.onrender.com\" target = \"_blank\">here</a>.\n                </p>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nimport { Section, Subsection} from './TextComponents'\nimport { NavLink } from 'react-router-dom';\nimport Utils from '../Utils'\n\nexport default class AboutPage extends React.Component {\n    render() {\n        document.title = \"About - Understanding Economics\";\n        let trackingUrl = \"/about\";\n        Utils.logPageview(trackingUrl);\n        return (\n            <div className = \"AboutPage\">\n                <Section>Paper</Section>\n\n                <p>\n                The full paper can be found <a href = \"https://www.dropbox.com/s/zlvzvj8pnqvb1iy/Stantcheva_Understanding_Economics.pdf?dl=0\" target = \"_blank\">here</a>.\n                </p>\n\n                <Section>Additional resources</Section>\n\n                <Subsection>Survey design</Subsection>\n\n                <p>The full survey questionnaire can be found <a href = \"https://www.dropbox.com/s/2evbqrrnodbkzet/Survey_Questionnaires.pdf?dl=0\" target = \"_blank\">here</a>.</p>\n\n                <p>Sometimes, the answers were grouped to reduce the numbers of categories to be displayed. The distribution of respondents’ characteristics between these categories can be found <NavLink exact to = \"/survey/pooled\">here</NavLink>. </p>\n\n                <p>Unlike the other topic categories, the \"text analysis\" section displays figures from the paper and are not plotted online in real-time. Data has been cleaned in order to be able to compare answers across respondents. The word clouds shows the words that are the most frequently used with a label size proportional to their frequency. The keywords show all groups of 2 words (separated with at most one word) that are significantly more used by one group compared to another group. More about the methodology used <a href = \"https://www.dropbox.com/s/wmr1rk6f59xb35o/Understanding_Economics_Online_Appendix.pdf?dl=0\" target = \"_blank\">here</a>.</p>\n\n                <Subsection>Randomization</Subsection>\n                <p>\n                A randomization consists in creating two groups whose characteristics are comparable in average: approximately same percentage of females, approximately same percentage of unemployed people, and so on and so forth. A group is shown a reference version of the survey while the other is shown a slightly modified one. Here, the modifications can be the formulation of the questions or the fact that some respondents are shown small videos about the policy. Then we compare respondents’ answers and see if there is a change or not, i.e. if the modifications have an impact on how people respond\n                </p>\n\n                <Subsection>Formulation</Subsection>\n                <p>\n                In each survey, the formulation of many of the questions was randomized. The same root question is asked in three different ways: generic and impersonal (e.g.: \"If the federal personal income tax rate were to increase for the middle class, to what extent would it encourage them to work less?\"). The second formulation is focused directly on the respondent themselves (\"If your federal personal income tax rate were to increase for the middle class, to what extent would it encourage you to work less?\"). The third is specifically about women (\"If the federal personal income tax rate were to increase for women in the middle class, to what extent would it encourage them to work less?\"). The goal is to elicit whether respondents think differently about a generic person, women, or themselves, but without asking the same person different versions of the same question.\n                </p>\n\n                <Subsection>Videos</Subsection>\n\n                <p>\n                The videos are made to assess whether explaining the stakes behind a policy can modify people's perceptions and supports. There are three versions of each video: an \"efficiency\" version, that focuses on comparing costs to benefits, a \"distributional\" version, that focuses on the effects on the distribution of outcomes across the whole population, and an \"economist\" version, that gathers both arguments in order to give a general view of what is at stake with the policy. \n                </p>\n                <ul>\n                    <li>Income: <a href = \"https://youtu.be/9xd-RHMiIcE\" target = \"_blank\">Efficiency</a> <a href =\"https://youtu.be/_vq7ZTjBN3Y\" target = \"_blank\">Distributional</a> <a href = \"https://youtu.be/e3NBmrzEmUQ\" target = \"_blank\">Economist</a></li>\n                    <li>Estate: <a href = \"https://www.youtube.com/watch?v=pZ47JuiqoOU\" target = \"_blank\">Efficiency</a> <a href = \"https://www.youtube.com/watch?v=Wz5Xr723tJk\" target = \"_blank\">Distributional</a> <a href = \"https://www.youtube.com/watch?v=qnT07wO8nVA\" target = \"_blank\">Economist</a></li>\n                    <li>Health: <a href = \"https://www.youtube.com/watch?v=Nai0nXX6VeQ\" target = \"_blank\">Efficiency</a> <a href = \"https://www.youtube.com/watch?v=Agexfb6apgY\" target = \"_blank\">Distributional</a> <a href = \"https://www.youtube.com/watch?time_continue=5&v=Se3SS4w5kNU\" target = \"_blank\">Economist</a></li>\n                    <li>Trade: <a href = \"https://www.youtube.com/watch?v=3GvqLq16e6s\" target = \"_blank\">Efficiency</a> <a href = \"https://www.youtube.com/watch?v=rgvI1g0ldh8\" target = \"_blank\">Distributional</a> <a href = \"https://www.youtube.com/watch?v=5LrbF7TrGq0\" target = \"_blank\">Economist</a></li>\n                </ul>\n\n                \n            </div>\n        )\n    }\n}","import React from 'react'\nimport \"../css/Footer.css\"\n\nexport default class Footer extends React.PureComponent {\n    render() {\n        return <footer className = \"page-footer footer\"> \n            Website developed by <a href = \"http://kevinbi.com/\" target = \"_blank\">Kevin Bi</a>, Adil Bhatia, and Julia Paul-Venturine. Project led by <a href = \"https://stefanie-stantcheva.onrender.com/\" target = \"_blank\">Stefanie Stantcheva</a>.<br/>\n            <a href = \"https://github.com/Understanding-Economics/Understanding-Economics.github.io\" target = \"_blank\">GitHub source for website</a>\n        </footer>\n    }\n}","import React from 'react';\nimport { Section, Subsection } from './TextComponents'\n\nexport default class ContactPage extends React.PureComponent {\n    render() {\n        return(<div className = \"ContactPage\" style = {{marginBottom: 20}}>\n            <Section>Contact us</Section>\n            <Subsection>Feedback</Subsection>\n            General feedback should be sent to: <a href = \"mailto:contact@socialeconomicslab.org\">contact@socialeconomicslab.org</a>. <br/><br/>\n\n            Any technical issues can be reported to: <a href = \"mailto:kevinbi@college.harvard.edu\">kevinbi@college.harvard.edu</a>. <br/><br/>\n\n            You can also reach Stefanie Stantcheva via email at <a href = \"mailto:sstantcheva@fas.harvard.edu\">sstantcheva@fas.harvard.edu</a>\n            <Subsection>Other research</Subsection>\n            If you are interested in seeing other research projects from Stefanie Stantcheva's Social Economics Lab, you can visit the <a href = \"http://socialeconomicslab.org/\">Social Economics Lab Website</a>!\n        </div>)\n    }\n}","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar'\nimport DataPage from './components/DataPage'\nimport HomePage from './components/HomePage'\nimport AboutPage from './components/AboutPage'\nimport { NavLink, Route, Switch, HashRouter as Router } from 'react-router-dom'\nimport NotFound from './components/NotFound'\nimport { surveys } from './config/fields.json'\nimport Footer from './components/Footer';\nimport ReactGA from 'react-ga'\nimport Utils from './Utils'\nimport ContactPage from './components/ContactPage';\n\nconst trackingId = \"UA-164717476-1\";\n// Only enable if not in a European timezone\nif(Utils.analyticsActive) {\n  ReactGA.initialize(trackingId);\n}\n\nclass App extends React.Component {\n  \n  render() {\n    // This is a suboptimal way to do this, but I want to treat each DataPage as a separate component\n    // This way the component mounts and unmounts each time\n    let surveyRoutes = Object.keys(surveys).map(surveyId => {\n        return (\n            <Route exact path ={`/survey/${surveyId}`} \n              component = {(props) => <DataPage surveyId = {`${surveyId}`} history = {props.history}/> } />\n        )\n    })\n    return (\n      <Router basename = \"/\">\n          <div className=\"App container\">\n          <NavLink exact to=\"/\">\n              <h2><strong>Understanding Economics</strong></h2>\n          </NavLink> \n          <NavigationBar />\n          <Switch>\n            <Route exact path=\"/\" component={HomePage}/>\n            <Route exact path=\"/about\" component={AboutPage}/>\n            {surveyRoutes}\n            <Route exact path = \"/contact\" component={ContactPage} />\n            <Route component={NotFound} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}