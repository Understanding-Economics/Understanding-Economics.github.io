{"version":3,"sources":["components/NavigationBar.js","components/ScrollableDesc.js","components/FieldSelect.js","components/NotFound.js","DataType.js","components/DataView.js","components/CrossTabView.js","Colors.js","components/ChartView.js","components/CategoricalDisplay.js","components/StatBubble.js","components/HistogramView.js","components/NumericDisplay.js","components/TreatmentChartView.js","components/DummyChartView.js","components/TreatmentDisplay.js","components/DataDisplay.js","components/DataPage.js","components/VariableDescription.js","components/QuestionSelector.js","components/DataPageAlt.js","components/HomePage.js","components/BackgroundPage.js","App.js","index.js"],"names":["NavigationBar","surveyLinks","Object","keys","surveys","map","surveyId","survey","className","activeClassName","to","title","exact","React","Component","ScrollableDesc","textStyle","minHeight","this","props","maxHeight","height","dangerouslySetInnerHTML","__html","content","style","ref","descDivRef","PureComponent","FieldSelect","slctDivRef","createRef","slctRef","options","dict","optionComponents","key","option","value","id","selectedTitle","selected","selectedDescription","description","size","onChange","handleSelect","current","selectedIndex","NotFound","DataType","CATEGORICAL","NUMERIC","TREATMENT","DataView","selectedQuestion","selectedGroup","header","elementId","width","componentDidUpdate","renderFunction","data","filter","x","CrossTabView","renderCrossTabs","cleanData","group","response","numeric","$","pivot","rows","aggregator","pivotUtilities","aggregators","document","getElementsByClassName","innerHTML","cols","Colors","Histogram","Categorical","Gradient3","Gradient4","Gradient5","ChartView","headerText","renderChart","bind","newX","sorters","sorter","sortAs","a","b","localeCompare","colorPattern","color","renderer","c3_renderers","rendererOptions","c3","parent","pattern","c3Override","getElementById","getElementsByTagName","remove","CategoricalDisplay","question","StatBubble","classNames","active","href","onClick","e","preventDefault","handleClick","stat","toFixed","HistogramView","renderHistogram","groupVal","nextProps","nextState","chart","dataNumeric","Number","scale","d3","scaleLinear","domain","min","max","range","histogram","thresholds","ticks","bins","binSizes","length","categories","bin","correctBin","correct","load","columns","generate","bindto","types","grid","lines","text","axis","type","bar","ratio","NumericDisplay","state","selectedGroupVal","statBubbles","calcAverages","sort","indexOf","marginBottom","average","createClickHandler","setState","filteredData","sortedData","acc","All","sum","count","groupId","questionId","row","k","TreatmentChartView","show","y","DummyChartView","tooltip","chartElement","legendItems","display","setAttribute","TreatmentDisplay","chartViews","questions","treatments","DataDisplay","specificDisplay","Error","dataCache","DataPage","undefined","selectedTopic","handleGroupSelect","handleTopicSelect","handleQuestionSelect","groups","additionalGroups","topics","surveyData","csv","process","then","event","target","QuestionSelector","topicTitle","topicDescription","questionTitle","questionDescription","receiveSelection","selectedContent","handleContentSelect","HomePage","App","surveyRoutes","path","component","basename","BackgroundPage","ReactDOM","render"],"mappings":"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","file":"static/js/main.1244c245.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/NavigationBar.css'\nimport { NavLink } from 'react-router-dom'\nimport { surveys } from '../config/fields.json'\n\nexport default class NavigationBar extends React.Component { \n    constructor() {\n        super();\n    }\n    render() {\n        let surveyLinks = Object.keys(surveys).map(surveyId => {\n            let survey = surveys[surveyId]\n            return (\n                <li className = \"nav-item\">\n                    <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/survey/${surveyId}`}>\n                        {survey.title}\n                    </NavLink>\n                </li>\n            )\n        })\n        return (\n            <ul className = \"nav nav-tabs\">\n                <li className = \"nav-item\">\n                    <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/\">\n                        Home\n                    </NavLink> \n                </li>\n                <li className = \"nav-item\">\n                    <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/background\">\n                        Background\n                    </NavLink> \n                </li>\n                {surveyLinks}\n            </ul>\n        )\n    }\n    componentDidMount() {\n\n    }\n}","import React from 'react'\n\nexport default class ScrollableDesc extends React.PureComponent {\n    render() {\n        let textStyle = {\n            minHeight : this.props.minHeight,\n            maxHeight : this.props.maxHeight,\n            height : this.props.height\n        }\n        return (\n            <div>\n                <div className = \"row\">\n                    <strong>{this.props.title}</strong>\n                </div>\n                <span className = \"row scrolling\" dangerouslySetInnerHTML={{__html : this.props.content}} style = {textStyle} ref = {this.descDivRef}>\n                </span>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/FieldSelect.css'\nimport '../App.css'\nimport ScrollableDesc from './ScrollableDesc';\n\nexport default class FieldSelect extends React.Component { \n    constructor() { \n        super();\n        this.slctDivRef = React.createRef();\n        this.descDivRef = React.createRef();\n        this.slctRef = React.createRef();\n    }\n\n    render() {\n        if(!this.props.options) {\n            return null;\n        }\n        let optionComponents = getValues(this.props.options).map((option) => {\n            return <option value = {option.id}>{option.title}</option>\n        });\n        let selectedTitle = this.props.selected ? this.props.options[this.props.selected].title : \"\";\n        let selectedDescription = this.props.selected ? this.props.options[this.props.selected].description : \"\";\n        return (\n            <div className = \"FieldSelect\">\n                <div className = \"row\">\n                    <h4>{this.props.title}</h4>\n                </div>\n                <div className = \"row\">\n                    <span>{this.props.description}</span>\n                </div>\n                <div className = \"row slctDiv\" ref = {this.slctDivRef}>\n                    <select className = \"align-left\" size = {7} ref = {this.slctRef} value = {this.props.selected} onChange={this.props.handleSelect}>\n                        {optionComponents}\n                    </select>\n                </div>\n                <ScrollableDesc \n                    title = {selectedTitle} \n                    content = {selectedDescription}\n                    height = \"125px\"\n                />\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        if(this.slctRef.current && !this.props.selected) { \n            this.slctRef.current.selectedIndex = \"-1\";\n        }\n    }\n}\n\nfunction getValues(dict) {\n    return Object.keys(dict).map(key => dict[key])\n}\n\nFieldSelect.propTypes = { \n    title : PropTypes.string,\n\n}","import React from 'react'\n\nexport default class NotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Page not found</h1> <br/>\n                <h3>Please double check the URL and try again</h3>\n            </div>\n        )\n    }\n}","const DataType = \n{\n    CATEGORICAL :  \"CATEGORICAL\", \n    NUMERIC : \"NUMERIC\",\n    TREATMENT : \"TREATMENT\"\n}\n\nexport default DataType;","import React from 'react'\n\nexport default class DataView extends React.Component {\n    render() {\n        if(!this.props.selectedQuestion || !this.props.selectedGroup) {\n            return null;\n        }\n        return (\n            <div className=\"DataView\">\n                <h5>{this.props.header}</h5>\n                <div id = {this.props.elementId} style={{width:\"100%\"}}></div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        this.componentDidUpdate();\n    }\n\n    componentDidUpdate() {\n        let selectedGroup = this.props.selectedGroup;\n        let selectedQuestion = this.props.selectedQuestion; \n        let renderFunction = this.props.renderFunction;\n        if (selectedGroup && selectedQuestion && this.props.data) {\n            let data = this.props.data.filter(x => x[selectedGroup.id] && x[selectedQuestion.id] && true)\n            renderFunction(this.props.elementId, selectedGroup, selectedQuestion, data);\n        }\n    }\n}","import React from 'react'\nimport DataView from './DataView'\nimport './../css/CrossTabView.css'\n\nexport default class CrossTabView extends React.Component {\n    render() {\n        return <DataView \n                    elementId = \"crosstab\" \n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderCrossTabs }\n                />\n    }\n\n    renderCrossTabs(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map((x) => { return {group : x[selectedGroup.id] || \" No Response\", response : x[selectedQuestion.id] || \" No Response\"} });\n        if(selectedQuestion.numeric) {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"])\n                });\n            for(let label of document.getElementsByClassName(\"pvtTotalLabel\")){ \n                label.innerHTML = \"Average\";\n            }\n        }\n        else {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    cols: [\"response\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Count\"]()\n                });\n        }\n    }\n}","const Colors = {\n    Histogram : [\"#00e699\"],\n    Categorical : [\"#00e699\", \"#008ae6\", \"#aa80ff\", \"#ff80ff\", \"#ff6666\", \"#ff9933\"],\n    Gradient3 : [\"#00e699\", \"#008ae6\", \"#aa80ff\"], \n    Gradient4 : [\"#00e699\", \"#008ae6\", \"#aa80ff\", \"#ff6666\"], \n    Gradient5 : [\"#00e699\", \"#008ae6\", \"#aa80ff\", \"#ff80ff\", \"#ff6666\"]\n}\n\nexport default Colors","import React from 'react'\nimport DataView from './DataView'\nimport Colors from '../Colors'\nimport '../css/ChartView.css'\n\nexport default class ChartView extends React.Component { \n    render() {\n        return <DataView\n                    elementId = {this.props.elementId || \"chart\"}\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    header = {this.props.headerText}\n                    renderFunction = { this.renderChart.bind(this) }\n                />\n    }\n\n    renderChart(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map(x => {\n            let newX = {};\n            newX[selectedGroup.title] = x[selectedGroup.id] || \" No response\"\n            newX[\"response\"] = x[selectedQuestion.id] || \" No response\";\n            return newX;\n        })\n        let sorters = {}\n        if(selectedGroup.sorter) {\n            sorters[selectedGroup.title] = $.pivotUtilities.sortAs(selectedGroup.sorter);\n        }\n        else {\n            sorters[selectedGroup.title] = (a, b) => a.localeCompare(b);\n        }\n        if(selectedQuestion.sorter) {\n            sorters[\"response\"] = $.pivotUtilities.sortAs(selectedQuestion.sorter);\n        }\n        else {\n            sorters[\"response\"] = (a, b) => a.localeCompare(b);\n        }\n        let colorPattern = selectedQuestion.color && typeof(selectedQuestion.color == \"string\") \n                            && selectedQuestion.color in Colors ? Colors[selectedQuestion.color] : selectedQuestion.color;\n\n        \n        $(`#${elementId}`).pivot(cleanData, {\n            rows : [selectedGroup.title],\n            cols: [\"response\"],\n            aggregator: $.pivotUtilities.aggregators[\"Count as Fraction of Rows\"](),\n            renderer: $.pivotUtilities.c3_renderers[\"Horizontal Stacked Bar Chart\"],\n            sorters : sorters,\n            rendererOptions : {\n                c3 :{ \n                    size : {\n                        width: $(`#${elementId}`).parent().width()\n                    }, \n                    color : {\n                        pattern : colorPattern || Colors.Categorical\n                    },\n                    ... this.props.c3Override,\n                }\n            }\n        });\n        for(let elt of document.getElementsByClassName(\"c3-axis-y-label\")) {\n            elt.innerHTML = \"Proportion\";\n        }\n        document.getElementById(elementId).getElementsByTagName(\"p\")[0].remove();\n    }\n}","import React from 'react'\nimport CrossTabView from './CrossTabView'\nimport ChartView from './ChartView'\n\nexport default class CategoricalDisplay extends React.Component {\n    render() {\n        return (\n            <div className = \"CategoricalDisplay\">\n                <div className = \"row\">\n                    <ChartView\n                        survey = { this.props.survey } \n                        data = { this.props.data }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                        headerText = { \"Each bar in the chart shows, for each group list on the left, the share of responses to the question.\" }\n                    />\n                </div>\n                <div className = \"row\">\n                    <CrossTabView\n                        survey = { this.props.survey } \n                        data = { this.props.data }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    cleanData(data) {\n        return data; \n    }\n}","import React from 'react'\nimport '../css/StatBubble.css'\n\nexport default class StatBubble extends React.PureComponent { \n    render() { \n    let classNames = \"StatBubble text-center card h-100 \" + (this.props.active ? \"active\" : \"\");\n        return (\n            <a href=\"#\" className = {classNames} onClick = { (e) => {e.preventDefault(); this.props.handleClick()} }>\n                <strong className = \"BubbleTitle\">{this.props.title}</strong>\n                {this.props.stat.toFixed(2)}\n            </a>\n        )\n    }\n}","import React from 'react'\nimport DataView from './DataView'\nimport Colors from '../Colors'\n\nexport default class HistogramView extends React.Component { \n    constructor() {\n        super();\n        this.renderHistogram = this.renderHistogram.bind(this);\n    }\n    render() {\n        return (\n        <div style={{width: \"100%\"}}> \n            <h5 className = \"text-center\">\n                Distribution of responses by group: <strong>{this.props.groupVal}</strong>\n            </h5>\n            <DataView\n                elementId = \"histogram\"\n                survey = { this.props.survey }\n                data = { this.props.data }\n                selectedGroup = { this.props.selectedGroup }\n                selectedQuestion = { this.props.selectedQuestion }\n                renderFunction = { this.renderHistogram }\n            />\n        </div>\n        )\n    }\n\n    shouldComponentUpdate(nextProps, nextState) { \n        if(nextProps.selectedGroup != this.props.selectedGroup || nextProps.selectedQuestion != this.props.selectedQuestion) {\n            this.chart = null;\n        }\n        return true;\n    }\n\n    renderHistogram(elementId, selectedGroup, selectedQuestion, data) {\n        let dataNumeric = data.map(x => Number(x[selectedQuestion.id]));\n        let cleanData = data.filter(x => this.props.groupVal === \"All\" || x[selectedGroup.id] == this.props.groupVal)\n                            .map(x => Number(x[selectedQuestion.id]));\n\n        let nticks = 15; \n        let scale = d3.scaleLinear()\n                        .domain([d3.min(dataNumeric), d3.max(dataNumeric)])\n                        .range([d3.min(dataNumeric), d3.max(dataNumeric)]);\n\n        let histogram = d3.histogram()\n                            .domain([d3.min(dataNumeric), d3.max(dataNumeric)])\n                            .thresholds(scale.ticks(nticks));\n        \n        let bins = histogram(cleanData);\n        let binSizes = bins.map(x => x.length);\n        let categories = bins.map(bin => `${bin[\"x0\"]}-${bin[\"x1\"]}`);\n        let correctBin = selectedQuestion.correct ? histogram([selectedQuestion.correct]).filter(x => x.length > 0)[0] : null;\n        if(!this.chart) {\n            this.chart = c3.generate({\n                bindto: `#${elementId}`,\n                data : {\n                    columns : [['count', ... binSizes]],\n                    types : { \n                        'count' : 'bar'\n                    }\n                },\n                grid : {\n                    x: {\n                        lines : (selectedQuestion.correct ? \n                                [{value : `${correctBin[\"x0\"]}-${correctBin[\"x1\"]}`, text : `Correct: ${selectedQuestion.correct}`}] : [])\n                    },\n                },\n                color : {\n                    pattern : Colors.Histogram\n                }, \n                axis : {\n                    x : {\n                        type : 'category',\n                        categories : categories\n                    }\n                },\n                bar: {\n                    width: {\n                        ratio: 1\n                    }\n                },\n            });\n        }\n        else {\n            this.chart.load({\n                columns : [['count', ... binSizes]]\n            })\n        }\n    }\n}","import React from 'react'\nimport StatBubble from './StatBubble'\nimport '../css/NumericDisplay.css'\nimport HistogramView from './HistogramView'\n\nexport default class NumericDisplay extends React.Component {\n    constructor() { \n        super();\n        this.state = {\n            selectedGroupVal : \"All\"\n        };\n    }\n    render() { \n        let data = this.cleanData(this.props.data);\n        let averages = this.calcAverages(data).sort((a, b) => {\n            if(a.groupVal == \"All\") {\n                return -1;\n            }\n            else if(b.groupVal == \"All\") {\n                return 1;\n            }\n            else if(this.props.group.sorter) {\n                return this.props.group.sorter.indexOf(a.groupVal) - this.props.group.sorter.indexOf(b.groupVal);\n            }\n            else {\n                return a.groupVal.localeCompare(b.groupVal);\n            }\n        });\n        let statBubbles = averages.map(x => \n            <div className = \"col-md-3\" style={{marginBottom : \"10px\"}}>\n                <StatBubble \n                    title = { x.groupVal }\n                    stat = { x.average }\n                    active = { x.groupVal == this.state.selectedGroupVal }\n                    handleClick = { this.createClickHandler(x.groupVal) }\n                />\n            </div>\n        );\n        return (\n            <div className = \"NumericDisplay\">\n                <div className = \"row header\">\n                    <h5>Average response to \"<strong>{this.props.question.description}</strong>\" by \"<strong>{this.props.group.title}</strong>\"</h5>\n                </div>\n                <div className = \"row\">\n                    { statBubbles }\n                </div>\n                <div className = \"row\">\n                    <HistogramView\n                        survey = { this.props.survey } \n                        data = { this.cleanData(this.props.data) }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                        groupVal = { this.state.selectedGroupVal }\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            selectedGroupVal : \"All\"\n        })\n    }\n\n    cleanData(data) {\n        let filteredData = data.filter(x => x[this.props.group.id] && x[this.props.question.id]);\n        let sortedData = filteredData.sort((a, b) => a[this.props.question.id] - b[this.props.question.id]);\n        return filteredData.filter(x => sortedData.indexOf(x) <= 0.95 * sortedData.length);\n    }\n    \n    createClickHandler(groupVal) {\n        return function() {\n            this.setState({\n                selectedGroupVal : groupVal\n            });\n        }.bind(this);\n    }\n\n    // TODO: calculate total average\n    calcAverages(data) {\n        let acc = {\n            All : {\n                sum : 0,\n                count : 0\n            }\n        }\n        let groupId = this.props.group.id;\n        let questionId = this.props.question.id;\n        for(let row of data) {\n            let groupVal = row[groupId];\n            if(!(groupVal in acc)) {\n                acc[groupVal] = {sum : 0, count : 0}\n            }\n            acc.All.sum += Number(row[questionId]);\n            acc.All.count++;\n            acc[groupVal].sum += Number(row[questionId]);\n            acc[groupVal].count++; \n        }\n        \n        return Object.keys(acc).map(k => { \n            return {groupVal : k, average : acc[k].count > 0 ? acc[k].sum / acc[k].count : 0}\n        })\n    }\n}","import React from 'react'\nimport ChartView from './ChartView'\n\nexport default class TreatmentChartView extends React.Component {\n    render() { \n        let c3Overrides = { \n            axis : {\n                x : {\n                    show : false\n                }, \n                y : {\n                    show : false\n                }\n            }\n        }\n\n        return <ChartView \n            survey = { this.props.survey } \n            data = { this.props.data }\n            selectedGroup = { this.props.selectedGroup }\n            selectedQuestion = { this.props.selectedQuestion }\n            elementId = { this.props.elementId }\n            headerText = {\" \"}\n            c3Override = { c3Overrides }\n        />\n    }\n}","import React from 'react'\nimport ChartView from './ChartView'\n\nexport default class DummyChartView extends React.Component {\n    render() { \n        let c3Overrides = { \n            axis : {\n                x : {\n                    show : true\n                }, \n                y : {\n                    show : false\n                }\n            }, \n            color: { \n                pattern : [\"#ffffff\"]\n            },\n            tooltip : {\n                show: false\n            },\n        }\n\n        return <ChartView \n            survey = { this.props.survey } \n            data = { this.props.data }\n            selectedGroup = { this.props.selectedGroup }\n            selectedQuestion = { this.props.selectedQuestion }\n            elementId = { this.props.elementId }\n            headerText = {\" \"}\n            c3Override = { c3Overrides }\n        />\n    }\n    \n    componentDidMount() {\n        this.componentDidUpdate();\n    }\n\n    componentDidUpdate() {\n        let chartElement = document.getElementById(this.props.elementId);\n        let legendItems = chartElement.getElementsByClassName(\"c3-legend-item\");\n        for(let item of legendItems) {\n            item.style.display = \"none\";\n        }\n\n        chartElement.getElementsByClassName(\"c3-chart\")[0].style.display = \"none\";\n        chartElement.getElementsByClassName(\"domain\")[0].style.display = \"none\";\n        let lines = chartElement.getElementsByTagName(\"line\");\n        for(let line of lines) {\n            line.style.display = \"none\";\n        }\n        \n        chartElement.getElementsByClassName(\"c3-axis-x-label\")[0].style.display = \"none\";\n\n        chartElement.getElementsByClassName(\"c3-axis-x\")[0].setAttribute(\"style\", \"font-weight: bold\");\n    }\n}","import React from 'react'\nimport TreatmentChartView from './TreatmentChartView'\nimport ScrollableDesc from './ScrollableDesc'\nimport DummyChartView from './DummyChartView'\n\nexport default class TreatmentDisplay extends React.Component { \n    render() {\n        if(!this.props.question) {\n            return null;\n        }\n        let chartViews = this.props.question.questions.map(question => \n            <div className = \"col-md\">\n                <ScrollableDesc\n                    title = {question.title}\n                    content = {question.description}\n                    height = {\"100px\"}\n                />\n                <TreatmentChartView\n                    survey = { this.props.survey } \n                    data = { this.props.data.filter(x => question.treatments.indexOf(x[\"mechanisms_rando\"]) >= 0) }\n                    selectedGroup = { this.props.group }\n                    selectedQuestion = { question }\n                    elementId = {`${question.title}_chart`}\n                    headerText = {\" \"}\n                />\n            </div>\n        )\n        return(\n            <div className = \"row\">\n                <div className = \"col-md-3\">\n                    <ScrollableDesc\n                        title = {this.props.group.title }\n                        content = {\" \"}\n                        height = {\"100px\"}\n                    /> \n                    <DummyChartView \n                        survey = { this.props.survey } \n                        data = { this.props.data }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                        elementId = {`dummy_chart`}\n                        headerText = {\" \"}\n                    />\n                </div>\n                {chartViews}\n            </div>\n        )\n    }\n}","import React from 'react'\nimport '../css/DataDisplay.css'\nimport DataType from '../DataType'\nimport CategoricalDisplay from './CategoricalDisplay'\nimport NumericDisplay from './NumericDisplay'\nimport TreatmentDisplay from './TreatmentDisplay'\n\nexport default class DataDisplay extends React.Component {\n    render() {\n        let question = this.props.selectedQuestion;\n        let specificDisplay = null;\n        if(!question) {\n            return null;\n        }\n        switch(question.type) {\n            case DataType.CATEGORICAL:\n                specificDisplay = <CategoricalDisplay \n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.NUMERIC:\n                specificDisplay = <NumericDisplay\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.TREATMENT:\n                specificDisplay = <TreatmentDisplay\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            default: \n                throw new Error(`Invalid data type for ${ this.props.selectedQuestion.id}`)\n\n        }\n        return (\n            <div className = \"DataDisplay\">\n                { specificDisplay }\n            </div>\n        )\n    }\n     \n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport FieldSelect from './FieldSelect'\nimport { surveys, groups } from '../config/fields.json'\nimport NotFound from './NotFound'\nimport DataDisplay from './DataDisplay'\nimport VariableDescription from './VariableDescription'\nimport incomeSurveyData from './../json_data/data_income_survey.json'\n\n// This is to cache the CSV data so that we are not consistently pinging the server for it.\nvar dataCache = {\n    \"income_survey\" : incomeSurveyData\n};\nexport default class DataPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedGroup : undefined,\n            selectedTopic : undefined,\n            selectedQuestion : undefined\n        }\n        this.handleGroupSelect = this.handleGroupSelect.bind(this);\n        this.handleTopicSelect = this.handleTopicSelect.bind(this);\n        this.handleQuestionSelect = this.handleQuestionSelect.bind(this); \n    }\n    componentWillMount() {\n        this.surveyId = this.props.surveyId;\n        if (this.surveyId && this.surveyId in surveys) {\n            this.survey = surveys[this.surveyId];\n        }\n        this.groups = {...groups, ... (this.survey.additionalGroups || {})}\n    }\n\n    render() {\n        if(!this.survey) {\n            return <NotFound />\n        }\n        return (\n            <div className = \"container-fluid\">\n                <div className = \"row\">\n                    <div className = \"col-md-4\">\n                        <FieldSelect \n                            title = \"Group\"\n                            description = \"Select how you would like to group responses\"\n                            options = { this.groups }\n                            selected = {this.state.selectedGroup ? this.state.selectedGroup.id : null}\n                            handleSelect = {this.handleGroupSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-4\">\n                        <FieldSelect\n                            title = \"Topic\"\n                            description = \"Select a topic that you would like to examine\"\n                            options = { this.survey.topics }\n                            selected = {this.state.selectedTopic ? this.state.selectedTopic.id : null}\n                            handleSelect = {this.handleTopicSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-4\">\n                        <FieldSelect\n                            title = \"Question\"\n                            description = \"Select a question to examine\"\n                            options = {this.state.selectedTopic ? \n                                this.state.selectedTopic.questions :\n                                null\n                            }\n                            selected = {this.state.selectedQuestion ? this.state.selectedQuestion.id : null}\n                            handleSelect = {this.handleQuestionSelect}\n                        />\n                    </div>\n                </div>\n                \n                <DataDisplay\n                    survey = { this.survey } \n                    data = { this.state.surveyData }\n                    selectedGroup = { this.state.selectedGroup }\n                    selectedQuestion = { this.state.selectedQuestion } \n                />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        if(!this.survey){\n            return;\n        }\n        document.title = this.survey.title;\n        if(this.surveyId in dataCache) {\n            this.setState({\n                surveyData : dataCache[this.surveyId]\n            });\n        }\n        else {\n            d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.surveyId}.csv`).then((data) => {\n                dataCache[this.surveyId] = data; \n                this.setState({\n                  surveyData : data\n                })\n              });\n        }\n      }\n\n    handleGroupSelect(event) {\n        this.setState({\n            selectedGroup : this.groups[event.target.value]\n        })\n    }\n\n    handleTopicSelect(event) {\n        this.setState({\n            selectedTopic : this.survey.topics[event.target.value],\n            selectedQuestion : undefined\n        })\n    }\n    \n    handleQuestionSelect(event) {\n        this.setState({\n            selectedQuestion : this.state.selectedTopic.questions[event.target.value]\n        })\n    }\n}\n\nDataPage.propTypes = {\n    survey : PropTypes.object\n}","import React from 'react'\nimport '../App.css'\n\nexport default class VariableDescription extends React.Component { \n    render() {\n        if (!this.props.selectedQuestion || !this.props.selectedQuestion.variables) { \n            return null;\n        }\n        \n        return (\n            <div>\n                <div className = \"row\">\n                    <h4>Variables</h4>\n                </div>\n                <div className = \"row\">\n                    <span>Definitions of the variables in the question</span>\n                </div>\n                <div className = \"row scrolling\">\n                    <ul>\n                    { this.props.selectedQuestion.variables ?\n                            this.props.selectedQuestion.variables.map(variable => (\n                                <li>\n                                    <strong>{variable.name}</strong>: {variable.description}\n                                </li>\n                            )) : null\n                    }               \n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport FieldSelect from './FieldSelect'\n\nexport default class QuestionSelector extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedTopic : undefined,\n            selectedQuestion : undefined\n        }\n        this.handleTopicSelect = this.handleTopicSelect.bind(this);\n        this.handleQuestionSelect = this.handleQuestionSelect.bind(this); \n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        let shouldUpdate = {... this.state} != {... nextState} || {... this.props} != {... nextProps};\n        return shouldUpdate;\n    }\n    render() { \n        return (\n            <div className = \"col-md-6\">\n                <div className = \"row\">\n                    <FieldSelect \n                        title = {this.props.topicTitle || \"Topic\"}\n                        description = {this.props.topicDescription || \"Select a topic to examine.\"}\n                        options = { this.props.topics }\n                        selected = { this.state.selectedTopic }\n                        handleSelect = { this.handleTopicSelect }\n                    />\n                </div>\n                <div className = \"row\">\n                    <FieldSelect \n                            title = {this.props.questionTitle || \"Question\"}\n                            description = {this.props.questionDescription || \"Select a question to examine.\"}\n                            options = {this.state.selectedTopic ? \n                                this.props.topics[this.state.selectedTopic].questions :\n                                null\n                            }\n                            selected = { this.state.selectedQuestion }\n                            handleSelect = { this.handleQuestionSelect }\n                        />\n                </div>\n            </div>\n        )\n    }\n\n    handleTopicSelect(event) {\n        this.setState({\n            selectedTopic : event.target.value,\n            selectedQuestion : undefined\n        }, () => {\n            this.props.receiveSelection(null);\n        });\n    }\n    \n    handleQuestionSelect(event) {\n        this.setState({\n            selectedQuestion : event.target.value\n        }, () => {\n            this.props.receiveSelection(this.props.topics[this.state.selectedTopic].questions[this.state.selectedQuestion]);\n        });\n    }\n}\n\nQuestionSelector.propTypes = {\n    topics : PropTypes.object,\n    receiveQuestion : PropTypes.func\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport QuestionSelector from './QuestionSelector'\nimport { surveys, groups } from '../config/fields.json'\nimport NotFound from './NotFound'\nimport DataDisplay from './DataDisplay'\n\n// This is to cache the CSV data so that we are not consistently pinging the server for it.\nvar dataCache = {};\nexport default class DataPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedGroup : undefined,\n            selectedContent : undefined\n        }\n        this.handleGroupSelect = this.handleGroupSelect.bind(this);\n        this.handleContentSelect = this.handleContentSelect.bind(this);\n    }\n    componentWillMount() {\n        this.surveyId = this.props.surveyId;\n        if (this.surveyId && this.surveyId in surveys) {\n            this.survey = surveys[this.surveyId];\n        };\n        this.groups = {...groups, ... (this.survey.additionalGroups || {})};\n        this.topics = {\"Demographics\" : {\n            id : \"Demographics\",\n            title : \"Demographics\",\n            description : \"Questions about the demographics of the respondent\",\n            questions : this.groups\n        }, ...this.survey.topics};\n    }\n\n    render() {\n        if(!this.survey) {\n            return <NotFound />\n        }\n        return (\n            <div className = \"container-fluid\">\n                <div className = \"row\">\n                    <QuestionSelector \n                        topics = {this.topics}\n                        receiveSelection= {this.handleGroupSelect}\n                    />\n\n                    <QuestionSelector \n                        topics = {this.topics}\n                        receiveSelection = {this.handleContentSelect}\n                    />\n                </div>\n                \n                <DataDisplay\n                    survey = { this.survey } \n                    data = { this.state.surveyData }\n                    selectedGroup = { this.state.selectedGroup }\n                    selectedQuestion = { this.state.selectedContent } \n                />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        if(!this.survey){\n            return;\n        }\n        document.title = this.survey.title;\n        if(this.surveyId in dataCache) {\n            this.setState({\n                surveyData : dataCache[this.surveyId]\n            });\n        }\n        else {\n            d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.surveyId}.csv`).then((data) => {\n                dataCache[this.surveyId] = data; \n                this.setState({\n                  surveyData : data\n                })\n              });\n        }\n      }\n\n    handleGroupSelect(selectedGroup) {\n        this.setState({\n            selectedGroup : selectedGroup\n        })\n    }\n\n    handleContentSelect(selectedContent) {\n        this.setState({\n            selectedContent : selectedContent\n        })\n    }\n}\n\nDataPage.propTypes = {\n    survey : PropTypes.object\n}","import React from 'react'\n\nexport default class HomePage extends React.Component {\n    render() {\n        document.title = \"Understanding Economics\";\n        return (\n            <div className = \"HomePage\">\n                <span>\n                    <p>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                    </p>\n                </span>\n\n                \n            </div>\n        )\n    }\n}","import React from 'react'\n\nexport default class HomePage extends React.Component {\n    render() {\n        document.title = \"Background - Understanding Economics\";\n        return (\n            <div className = \"HomePage\">\n                <span>\n                    <p>\n                       Some background info about the project here.\n                    </p>\n\n                    <p>\n                        Some other background info.\n                    </p>\n                </span>\n\n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar'\nimport DataPage from './components/DataPage'\nimport DataPageAlt from './components/DataPageAlt'\nimport HomePage from './components/HomePage'\nimport BackgroundPage from './components/BackgroundPage'\nimport { Route, Switch, HashRouter as Router } from 'react-router-dom'\nimport NotFound from './components/NotFound'\nimport { surveys } from './config/fields.json'\n\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n    this.state = {\n      surveyData : null,\n      selectedGroup : null,\n      selectedQuestion : null\n    }\n  }\n  \n  render() {\n    // This is a suboptimal way to do this, but I want to treat each DataPage as a separate component\n    // This way the component mounts and unmounts each time\n    let surveyRoutes = Object.keys(surveys).map(surveyId => {\n        return (\n            <Route exact path ={`/survey/${surveyId}`} component = {() => <DataPage surveyId = {`${surveyId}`}/> } />\n        )\n    })\n\n    \n    return (\n      <Router basename = \"/\">\n        <div className=\"App container\">\n          <h3>Understanding Economics</h3>\n          <NavigationBar />\n          <Switch>\n            <Route exact path=\"/\" component={HomePage}/>\n            <Route exact path=\"/background\" component={BackgroundPage}/>\n            {surveyRoutes}\n            <Route exact path=\"/survey_alt/income_survey\" component = {() => <DataPageAlt surveyId = \"income_survey\"/>} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}