{"version":3,"sources":["components/NavigationBar.js","components/ScrollableDesc.js","components/FieldSelect.js","components/NotFound.js","DataType.js","components/DataView.js","components/CrossTabView.js","Colors.js","Utils.js","components/ChartView.js","components/ChartLegend.js","components/CategoricalDisplay.js","components/StatBubble.js","components/HistogramView.js","NumberFormats.js","components/NumericDisplay.js","components/TreatmentChartView.js","components/DummyChartView.js","components/TreatmentDisplay.js","components/DataDisplay.js","components/DataPage.js","components/HomePage.js","components/BackgroundPage.js","App.js","index.js"],"names":["NavigationBar","surveyLinks","Object","keys","surveys","map","surveyId","survey","className","activeClassName","to","title","exact","React","Component","ScrollableDesc","textStyle","minHeight","this","props","maxHeight","height","dangerouslySetInnerHTML","__html","content","style","ref","descDivRef","PureComponent","FieldSelect","slctDivRef","createRef","slctRef","options","dict","optionComponents","key","option","value","id","selectedTitle","selected","selectedDescription","description","size","onChange","handleSelect","current","selectedIndex","NotFound","DataType","CATEGORICAL","NUMERIC","TREATMENT","MULTICHOICE","KEYNESS","WORDCLOUD","DataView","selectedQuestion","selectedGroup","width","elementId","componentDidUpdate","renderFunction","data","filter","x","CrossTabView","renderCrossTabs","cleanData","group","response","numeric","$","pivot","rows","aggregator","pivotUtilities","aggregators","document","getElementsByClassName","innerHTML","cols","Colors","Histogram","Categorical","Gradient3","Gradient4","Gradient5","Utils","getUniqueDictVals","sorter","v","i","a","indexOf","trim","length","sort","getProportions","groupKey","groupVal","responseKey","responseVals","undefined","filteredData","countsDict","val","total","forEach","propsDict","getQuestionSorter","question","sortAs","b","localeCompare","getGroupSorter","getColorPattern","colorPattern","color","ChartView","renderChart","bind","groupSorter","responseSorter","groupVals","concat","proportions","chartData","responseVal","console","log","c3","generate","merge","all","bindto","columns","groups","type","order","parent","pattern","legend","item","onclick","tooltip","grouped","bar","ratio","rotated","categories","y","max","label","tick","format","d3","c3Override","ChartLabel","getElementById","baseVal","ChartLegend","legendItems","backgroundColor","margin","fontSize","maxWidth","padding","marginLeft","marginRight","CategoricalDisplay","paddingLeft","StatBubble","classNames","active","href","onClick","e","preventDefault","handleClick","formatter","stat","toFixed","HistogramView","renderHistogram","nextProps","nextState","chart","dataNumeric","Number","scale","scaleLinear","domain","min","range","histogram","thresholds","ticks","bins","binSizes","bin","correctBin","correct","load","types","grid","lines","text","class","position","axis","NumberFormats","percent","s","dollar","NumericDisplay","state","selectedGroupVal","averages","calcAverages","statBubbles","marginBottom","average","createClickHandler","correctDiv","verticalAlign","source","toLowerCase","setState","sortedData","acc","All","sum","count","groupId","questionId","row","k","TreatmentChartView","show","DummyChartView","displayElts","overflow","marginTop","TreatmentDisplay","columnWidth","questions","chartViews","treatments","descriptions","DataDisplay","specificDisplay","Error","dataCache","DataPage","selectedTopic","handleGroupSelect","handleTopicSelect","handleQuestionSelect","additionalGroups","topics","surveyData","csv","process","then","event","target","HomePage","App","surveyRoutes","path","component","basename","BackgroundPage","ReactDOM","render"],"mappings":"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","file":"static/js/main.c9b03ad1.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/NavigationBar.css'\nimport { NavLink } from 'react-router-dom'\nimport { surveys } from '../config/fields.json'\n\nexport default class NavigationBar extends React.Component { \n    constructor() {\n        super();\n    }\n    render() {\n        let surveyLinks = Object.keys(surveys).map(surveyId => {\n            let survey = surveys[surveyId]\n            return (\n                <li className = \"nav-item\">\n                    <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/survey/${surveyId}`}>\n                        {survey.title}\n                    </NavLink>\n                </li>\n            )\n        })\n        return (\n            <ul className = \"nav nav-tabs\">\n                <li className = \"nav-item\">\n                    <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/\">\n                        Home\n                    </NavLink> \n                </li>\n                <li className = \"nav-item\">\n                    <NavLink exact className=\"nav-link\" activeClassName=\"active\" to=\"/background\">\n                        Background\n                    </NavLink> \n                </li>\n                {surveyLinks}\n            </ul>\n        )\n    }\n    componentDidMount() {\n\n    }\n}","import React from 'react'\n\nexport default class ScrollableDesc extends React.PureComponent {\n    render() {\n        let textStyle = {\n            minHeight : this.props.minHeight,\n            maxHeight : this.props.maxHeight,\n            height : this.props.height\n        }\n        return (\n            <div>\n                <div className = \"row\">\n                    <strong>{this.props.title}</strong>\n                </div>\n                <span className = \"row scrolling\" dangerouslySetInnerHTML={{__html : this.props.content}} style = {textStyle} ref = {this.descDivRef}>\n                </span>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport '../css/FieldSelect.css'\nimport '../App.css'\nimport ScrollableDesc from './ScrollableDesc';\n\nexport default class FieldSelect extends React.Component { \n    constructor() { \n        super();\n        this.slctDivRef = React.createRef();\n        this.descDivRef = React.createRef();\n        this.slctRef = React.createRef();\n    }\n\n    render() {\n        if(!this.props.options) {\n            return null;\n        }\n        let optionComponents = getValues(this.props.options).map((option) => {\n            return <option value = {option.id}>{option.title}</option>\n        });\n        let selectedTitle = this.props.selected ? this.props.options[this.props.selected].title : \"\";\n        let selectedDescription = this.props.selected ? this.props.options[this.props.selected].description : \"\";\n        return (\n            <div className = \"FieldSelect\">\n                <div className = \"row\">\n                    <h4>{this.props.title}</h4>\n                </div>\n                <div className = \"row\">\n                    <span>{this.props.description}</span>\n                </div>\n                <div className = \"row slctDiv\" ref = {this.slctDivRef}>\n                    <select className = \"align-left\" size = {7} ref = {this.slctRef} value = {this.props.selected} onChange={this.props.handleSelect}>\n                        {optionComponents}\n                    </select>\n                </div>\n                <ScrollableDesc \n                    title = {selectedTitle} \n                    content = {selectedDescription}\n                    height = \"125px\"\n                />\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        if(this.slctRef.current && !this.props.selected) { \n            this.slctRef.current.selectedIndex = \"-1\";\n        }\n    }\n}\n\nfunction getValues(dict) {\n    return Object.keys(dict).map(key => dict[key])\n}\n\nFieldSelect.propTypes = { \n    title : PropTypes.string,\n\n}","import React from 'react'\n\nexport default class NotFound extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Page not found</h1> <br/>\n                <h3>Please double check the URL and try again</h3>\n            </div>\n        )\n    }\n}","const DataType = \n{\n    CATEGORICAL :  \"CATEGORICAL\", \n    NUMERIC : \"NUMERIC\",\n    TREATMENT : \"TREATMENT\",\n    MULTICHOICE : \"MULTICHOICE\",\n    KEYNESS : \"KEYNESS\",\n    WORDCLOUD : \"WORDCLOUD\"\n}\n\nexport default DataType;","import React from 'react'\n\nexport default class DataView extends React.Component {\n    render() {\n        if(!this.props.selectedQuestion || !this.props.selectedGroup) {\n            return null;\n        }\n        return (\n            <div className=\"DataView text-center\" style={{width: \"100%\"}}>\n                <div id = {this.props.elementId} style={{width:\"100%\"}}></div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        this.componentDidUpdate();\n    }\n\n    componentDidUpdate() {\n        let selectedGroup = this.props.selectedGroup;\n        let selectedQuestion = this.props.selectedQuestion; \n        let renderFunction = this.props.renderFunction;\n        if (selectedGroup && selectedQuestion && this.props.data) {\n            let data = this.props.data.filter(x => x[selectedGroup.id] && x[selectedQuestion.id] && true)\n            renderFunction(this.props.elementId, selectedGroup, selectedQuestion, data);\n        }\n    }\n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport DataView from './DataView'\nimport './../css/CrossTabView.css'\n\nexport default class CrossTabView extends React.Component {\n    render() {\n        return <DataView \n                    elementId = \"crosstab\" \n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderCrossTabs }\n                />\n    }\n\n    renderCrossTabs(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map((x) => { return {group : x[selectedGroup.id] || \" No Response\", response : x[selectedQuestion.id] || \" No Response\"} });\n        if(selectedQuestion.numeric) {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"])\n                });\n            for(let label of document.getElementsByClassName(\"pvtTotalLabel\")){ \n                label.innerHTML = \"Average\";\n            }\n        }\n        else {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    cols: [\"response\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Count\"]()\n                });\n        }\n    }\n}","const Colors = {\n    Histogram : [\"#00e699\"],\n    Categorical : [\"#00e699\", \"#008ae6\", \"#aa80ff\", \"#ff80ff\", \"#ff6666\", \"#ff9933\"],\n    Gradient3 : [\"#00e699\", \"#008ae6\", \"#aa80ff\"], \n    Gradient4 : [\"#00e699\", \"#008ae6\", \"#aa80ff\", \"#ff6666\"], \n    Gradient5 : [\"#00e699\", \"#008ae6\", \"#aa80ff\", \"#ff80ff\", \"#ff6666\"]\n}\n\nexport default Colors","/* eslint no-undef: \"off\"*/\nimport Colors from './Colors'\nconst Utils = {\n    getUniqueDictVals: function(data, key, sorter) {\n        let vals = data.map(x => x[key]);\n        var uniqueVals = vals.filter((v, i, a) => a.indexOf(v) === i);\n        return uniqueVals.filter(x => x && x.trim().length > 0).sort(sorter);\n    },\n\n    // For each group, gets the proportion of each response\n    /**\n     *\n     * @param {array} data array of dictionaries representing the data\n     * @param {string} groupKey the group that we want proportions for\n     * @param {string} groupVal the specific group value that we want proportions for\n     * @param {string} responseKey the dictionary key of the response variable that we want proportions for\n     */\n     /* getProportions : function(data, groupKey, groupVal, responseKey){\n       var final_result = [];\n       var unique_rkeys = [];\n\n       for (var i = 0; i < data.length; i++) {\n           var rKey = data[i].responseKey;\n           if (unique_rkeys.includes(rKey)){\n               continue;\n           } else {\n               unique_rkeys.push(rKey);\n           }\n       }\n\n       var total_responses = data.length\n\n       for (i = 0; i < unique_rkeys.length; i++) {\n         var response_key = unique_rkeys[i]\n         final_result.push({\n            response_key: 0\n         })\n         for (var j = 0; j < data.length; j++) {\n             var gKey = data[j].groupKey;\n             var gVal = data[j].groupVal;\n             var rKey = data[j].responseKey;\n\n             if (rKey = response_key){\n                 final_result.response_key = final_result.response_key + 1;\n             } else {\n                 continue;\n             }\n          }\n\n          final_result.response_key = final_result.response_key / total_responses;\n\n        }\n\n         return final_result;\n\n     },*/\n    getProportions : function(data, groupKey, groupVal, responseKey) {\n         let responseVals = this.getUniqueDictVals(data, responseKey, undefined);\n         let filteredData = data.filter(x => (x[groupKey] == groupVal || groupVal == \"All\") && x[responseKey] != undefined);\n         let countsDict = {}\n         for(let val of responseVals) {\n             countsDict[val] = 0;\n         }\n\n         let total = filteredData.length;\n         filteredData.forEach(x => countsDict[x[responseKey]]++);\n         let propsDict = {};\n         for(let val of responseVals){ \n             propsDict[val] = countsDict[val] / total;\n         }\n         return propsDict;\n    },\n\n    getQuestionSorter: function(question) {\n        if(question.sorter) {\n            return $.pivotUtilities.sortAs(question.sorter);\n        }\n        else {\n            return (a, b) => a.localeCompare(b);\n        }\n    },\n\n    getGroupSorter: function(group) {\n        if(group.sorter) {\n            return (a, b) => {\n                if (a == \"All\") return -1;\n                if (b == \"All\") return 1;\n                else return $.pivotUtilities.sortAs(group.sorter)(a, b);\n            }\n        }\n        else {\n            return (a, b) => {\n                if (a == \"All\") return -1;\n                if (b == \"All\") return 1;\n                else return a.localeCompare(b)\n            }\n        }\n    },\n\n    getColorPattern: function(question) {\n        let colorPattern = question.color && typeof(question.color == \"string\")\n        && question.color in Colors ? Colors[question.color] : question.color;\n        if(colorPattern) return colorPattern\n        else return Colors.Categorical\n    }\n}\n\nexport default Utils;\n","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport DataView from './DataView'\nimport Colors from '../Colors'\nimport '../css/ChartView.css'\nimport Utils from '../Utils'\nimport merge from 'deepmerge'\n\nexport default class ChartView extends React.Component { \n    render() {\n        return <DataView\n                    elementId = {this.props.elementId || \"chart\"}\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderChart.bind(this) }\n                />\n    }\n\n    renderChart(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map(x => {\n            return {\n                [selectedGroup.id]: x[selectedGroup.id] || \" No response\",\n                [selectedQuestion.id]: x[selectedQuestion.id] || \" No response\"\n            };\n        });\n        let groupSorter = Utils.getGroupSorter(selectedGroup);\n        let responseSorter = Utils.getQuestionSorter(selectedQuestion)\n        let colorPattern = Utils.getColorPattern(selectedQuestion);\n        let groupVals = [\"All\"].concat(Utils.getUniqueDictVals(cleanData, selectedGroup.id, groupSorter));\n        let responseVals = Utils.getUniqueDictVals(cleanData, selectedQuestion.id, responseSorter);\n        let proportions = {}\n        for(let groupVal of groupVals) {\n            proportions[groupVal] = Utils.getProportions(cleanData, selectedGroup.id, \n                groupVal, selectedQuestion.id, responseSorter); \n        }\n        let chartData = responseVals.map(responseVal => {\n            return [responseVal, ... groupVals.map(x => proportions[x][responseVal])]\n        });\n\n        const barWidth = 75;\n        console.log(chartData);\n        let chart = c3.generate(merge.all([{\n            bindto: `#${elementId}`,\n            data : { \n                columns: chartData,\n                groups : [responseVals],\n                type : \"bar\", \n                order: null\n            },\n            size : {\n                width: $(`#${elementId}`).parent().width()\n            }, \n            color : {\n                pattern : colorPattern || Colors.Categorical\n            },\n            legend : {\n                item : {\n                    onclick : function() {}\n                }\n            },\n            tooltip: {\n                grouped : false\n            }, \n            bar : {\n                width:{ \n                    ratio: 0.75\n                }\n\n            }, \n            size : {\n                height: groupVals.length * barWidth\n            },\n            axis : {\n                rotated : true, \n                x : {\n                    type: \"category\", \n                    categories: groupVals\n                }, \n                y : {\n                    // This is some hacky shit to get rid of the 110% display\n                    max : 0.95,\n                    label: \"Proportion\",\n                    tick : {\n                        format: d3.format(\".0%\")\n                    }\n                }\n            },\n        }, this.props.c3Override || {}]));\n        for(let elt of document.getElementsByClassName(\"c3-axis-y-label\")) {\n            elt.innerHTML = \"Proportion\";\n        }\n        // document.getElementById(elementId).getElementsByTagName(\"p\")[0].remove();\n        let ChartLabel = document.getElementById(\"ChartLabel\");\n        if (ChartLabel) {\n            ChartLabel.style.height = document.getElementsByClassName(\"c3-event-rect\")[0].height.baseVal.value + \"px\";\n        }\n    }\n}","import React from 'react'\nimport Colors from '../Colors'\nimport Utils from '../Utils';\n\nexport default class ChartLegend extends React.PureComponent {\n    render() { \n        if (!this.props.question || !this.props.data) {\n            return null;\n        }\n        let colorPattern = Utils.getColorPattern(this.props.question); \n        let responses = Utils.getUniqueDictVals(this.props.data, this.props.question.id, \n                            Utils.getQuestionSorter(this.props.question));\n        \n        let legendItems = responses.map((val, i) => \n        <div className = \"col-md text-center card unselectable\"\n        style = {{\n            color : \"black\",\n            backgroundColor: colorPattern[i],\n            margin: \"3px\",\n            fontSize : \"13px\",\n            minHeight: \"30px\",\n            maxWidth: \"33%\", \n            padding: \"3px\"\n        }}>\n            <strong>{val}</strong>\n        </div>)\n        return <div className = \"row legend\" style={{marginLeft: \"auto\", marginRight: \"auto\", width:\"100%\"}}>\n            {legendItems}\n        </div>\n    }\n}","import React from 'react'\nimport CrossTabView from './CrossTabView'\nimport ChartView from './ChartView'\nimport ChartLegend from './ChartLegend'\n\nexport default class CategoricalDisplay extends React.Component {\n    render() {\n        return (\n            <div className = \"CategoricalDisplay\">\n                <div className = \"row header\">\n                    <h5>Proportion of responses to \"<strong>{this.props.question.description}</strong>\" by \"<strong>{this.props.group.title}</strong>\"</h5>\n                </div>\n                <div className = \"row\" style = {{paddingLeft:\"20px\"}}>\n                    <ChartLegend \n                        data = { this.props.data }\n                        question = { this.props.question }\n                    />\n                </div>\n                <div className = \"row\">\n                    <ChartView\n                        survey = { this.props.survey } \n                        data = { this.props.data }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                    />\n                </div>\n                <div className = \"row\">\n                    <CrossTabView\n                        survey = { this.props.survey } \n                        data = { this.props.data }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    cleanData(data) {\n        return data; \n    }\n}","import React from 'react'\nimport '../css/StatBubble.css'\n\nexport default class StatBubble extends React.PureComponent { \n    render() { \n    let classNames = \"StatBubble text-center card h-100 \" + (this.props.active ? \"active\" : \"\");\n        return (\n            <a href=\"#\" className = {classNames} onClick = { (e) => {e.preventDefault(); this.props.handleClick()} }>\n                <strong className = \"BubbleTitle\">{this.props.title}</strong>\n                {this.props.formatter ? this.props.formatter(this.props.stat.toFixed(0)) : this.props.stat.toFixed(0)}\n            </a>\n        )\n    }\n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport DataView from './DataView'\nimport Colors from '../Colors'\nimport '../css/HistogramView.css'\n\nexport default class HistogramView extends React.Component { \n    constructor() {\n        super();\n        this.renderHistogram = this.renderHistogram.bind(this);\n    }\n    render() {\n        return (\n        <div style={{width: \"100%\"}}> \n            <h5 className = \"text-center\">\n                Distribution of responses by group: <strong>{this.props.groupVal}</strong>\n            </h5>\n            <DataView\n                elementId = \"histogram\"\n                survey = { this.props.survey }\n                data = { this.props.data }\n                selectedGroup = { this.props.selectedGroup }\n                selectedQuestion = { this.props.selectedQuestion }\n                renderFunction = { this.renderHistogram }\n            />\n        </div>\n        )\n    }\n\n    shouldComponentUpdate(nextProps, nextState) { \n        if(nextProps.selectedGroup != this.props.selectedGroup || nextProps.selectedQuestion != this.props.selectedQuestion) {\n            this.chart = null;\n        }\n        return true;\n    }\n\n    renderHistogram(elementId, selectedGroup, selectedQuestion, data) {\n        let dataNumeric = data.map(x => Number(x[selectedQuestion.id]));\n        let cleanData = data.filter(x => this.props.groupVal === \"All\" || x[selectedGroup.id] == this.props.groupVal)\n                            .map(x => Number(x[selectedQuestion.id]));\n\n        let nticks = 15; \n        let scale = d3.scaleLinear()\n                        .domain([d3.min(dataNumeric), d3.max(dataNumeric)])\n                        .range([d3.min(dataNumeric), d3.max(dataNumeric)]);\n\n        let histogram = d3.histogram()\n                            .domain([d3.min(dataNumeric), d3.max(dataNumeric)])\n                            .thresholds(scale.ticks(nticks));\n        \n        let bins = histogram(cleanData);\n        let binSizes = bins.map(x => x.length);\n        let categories = bins.map(bin => `${bin[\"x0\"]}-${bin[\"x1\"]}`);\n        let correctBin = selectedQuestion.correct ? histogram([selectedQuestion.correct]).filter(x => x.length > 0)[0] : null;\n        if(!this.chart) {\n            this.chart = c3.generate({\n                bindto: `#${elementId}`,\n                data : {\n                    columns : [['count', ... binSizes]],\n                    types : { \n                        'count' : 'bar'\n                    }\n                },\n                grid : {\n                    x: {\n                        lines : (selectedQuestion.correct ? \n                                [{\n                                    value : `${correctBin[\"x0\"]}-${correctBin[\"x1\"]}`, \n                                    text : `Correct: ${this.props.formatter(selectedQuestion.correct)}`, \n                                    class: \"correct_line\",\n                                    position: \"middle\", \n                                }\n                                ] : [])\n                    },\n                },\n                color : {\n                    pattern : Colors.Histogram\n                }, \n                axis : {\n                    x : {\n                        type : 'category',\n                        categories : categories\n                    }\n                },\n                bar: {\n                    width: {\n                        ratio: 1\n                    }\n                },\n            });\n        }\n        else {\n            this.chart.load({\n                columns : [['count', ... binSizes]]\n            })\n        }\n    }\n}","const NumberFormats = { \n    percent : s => `${s}%`,\n    dollar : s => `$${s}`\n}\n\nexport default NumberFormats","import React from 'react'\nimport StatBubble from './StatBubble'\nimport '../css/NumericDisplay.css'\nimport HistogramView from './HistogramView'\nimport NumberFormats from '../NumberFormats'\nimport Utils from '../Utils'\n\nexport default class NumericDisplay extends React.Component {\n    constructor() { \n        super();\n        this.state = {\n            selectedGroupVal : \"All\"\n        };\n    }\n    render() { \n        let data = this.cleanData(this.props.data);\n        let averages = this.calcAverages(data).sort((a, b) => Utils.getGroupSorter(this.props.group)(a.groupVal, b.groupVal));\n        let formatter = NumberFormats[this.props.question.format] || (x => x);\n        let statBubbles = averages.map(x => \n            <div className = \"col-md-3\" style={{marginBottom : \"10px\"}}>\n                <StatBubble \n                    title = { x.groupVal }\n                    stat = { x.average }\n                    active = { x.groupVal == this.state.selectedGroupVal }\n                    handleClick = { this.createClickHandler(x.groupVal) }\n                    formatter = { formatter }\n                />\n            </div>\n        );\n        let correctDiv = null;\n        if(this.props.question.correct != undefined) {\n            correctDiv = <div className = \"row header\">\n                <strong style={{color:\"green\", fontSize:\"14pt\"}}>Correct Answer: {formatter(this.props.question.correct)}</strong>\n                <em style={{fontSize:\"8pt\", marginLeft: \"5px\", verticalAlign: \"bottom\"}}>{this.props.question.source ? `  (Source: ${this.props.question.source})` : null}</em>\n            </div>\n        }\n        return (\n            <div className = \"NumericDisplay\">\n                <div className = \"row header\">\n                    <h5>Average response to \"<strong>{this.props.question.description}</strong>\" by <strong>{this.props.group.title.toLowerCase()}</strong> of the respondent</h5>\n                </div>\n                {correctDiv}\n                <div className = \"row\">\n                    { statBubbles }\n                </div>\n                <div className = \"row\">\n                    <HistogramView\n                        survey = { this.props.survey } \n                        data = { this.cleanData(this.props.data) }\n                        selectedGroup = { this.props.group }\n                        selectedQuestion = { this.props.question }\n                        groupVal = { this.state.selectedGroupVal }\n                        formatter = {formatter}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            selectedGroupVal : \"All\"\n        })\n    }\n\n    cleanData(data) {\n        let filteredData = data.filter(x => x[this.props.group.id] && x[this.props.question.id]);\n        let sortedData = filteredData.sort((a, b) => a[this.props.question.id] - b[this.props.question.id]);\n        return filteredData.filter(x => sortedData.indexOf(x) <= 0.95 * sortedData.length);\n    }\n    \n    createClickHandler(groupVal) {\n        return function() {\n            this.setState({\n                selectedGroupVal : groupVal\n            });\n        }.bind(this);\n    }\n    \n    calcAverages(data) {\n        let acc = {\n            All : {\n                sum : 0,\n                count : 0\n            }\n        }\n        let groupId = this.props.group.id;\n        let questionId = this.props.question.id;\n        for(let row of data) {\n            let groupVal = row[groupId];\n            if(!(groupVal in acc)) {\n                acc[groupVal] = {sum : 0, count : 0}\n            }\n            acc.All.sum += Number(row[questionId]);\n            acc.All.count++;\n            acc[groupVal].sum += Number(row[questionId]);\n            acc[groupVal].count++; \n        }\n        \n        return Object.keys(acc).map(k => { \n            return {groupVal : k, average : acc[k].count > 0 ? acc[k].sum / acc[k].count : 0}\n        })\n    }\n}","import React from 'react'\nimport ChartView from './ChartView'\n\nexport default class TreatmentChartView extends React.Component {\n    render() { \n        let c3Overrides = { \n            axis : {\n                rotated : true, \n                x : {\n                    show : false\n                }, \n                y : {\n                    show : false\n                }\n            }\n        }\n\n        return <ChartView \n            survey = { this.props.survey } \n            data = { this.props.data }\n            selectedGroup = { this.props.selectedGroup }\n            selectedQuestion = { this.props.selectedQuestion }\n            elementId = { this.props.elementId }\n            c3Override = { c3Overrides }\n        />\n    }\n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport Utils from '../Utils'\n\nexport default class DummyChartView extends React.Component {\n    render() { \n        let c3Overrides = { \n            axis : {\n                x : {\n                    show : true\n                }, \n                y : {\n                    show : false\n                }\n            }, \n            color: { \n                pattern : [\"#ffffff\"]\n            },\n            tooltip : {\n                show: false\n            },\n        }\n\n        let sorter = null;\n        if(this.props.selectedGroup.sorter) {\n            sorter = $.pivotUtilities.sortAs(this.props.selectedGroup.sorter);\n        }\n        else {\n            sorter = (a, b) => a.localeCompare(b);\n        }\n\n        let displayElts = [\"All\", ...Utils.getUniqueDictVals(this.props.data, this.props.selectedGroup.id, sorter)]\n                            .map(x => <tr style={{overflow: \"hidden\"}}><td><strong>{x}</strong></td></tr>);\n\n        return <table id = \"ChartLabel\" style={{marginTop: \"2%\"}}>\n            <tbody style={{fontSize : \"12px\"}}>\n                {displayElts}\n            </tbody>\n        </table>\n\n        /* return <ChartView \n            survey = { this.props.survey } \n            data = { this.props.data }\n            selectedGroup = { this.props.selectedGroup }\n            selectedQuestion = { this.props.selectedQuestion }\n            elementId = { this.props.elementId }\n            c3Override = { c3Overrides }\n        />*/ \n    }\n    \n    componentDidMount() {\n        this.componentDidUpdate();\n    }\n\n    componentDidUpdate() {\n        /* let chartElement = document.getElementById(this.props.elementId);\n        let legendItems = chartElement.getElementsByClassName(\"c3-legend-item\");\n        for(let item of legendItems) {\n            item.style.display = \"none\";\n        }\n\n        chartElement.getElementsByClassName(\"c3-chart\")[0].style.display = \"none\";\n        chartElement.getElementsByClassName(\"domain\")[0].style.display = \"none\";\n        let lines = chartElement.getElementsByTagName(\"line\");\n        for(let line of lines) {\n            line.style.display = \"none\";\n        }\n        \n        chartElement.getElementsByClassName(\"c3-axis-x-label\")[0].style.display = \"none\";\n\n        chartElement.getElementsByClassName(\"c3-axis-x\")[0].setAttribute(\"style\", \"font-weight: bold\"); */\n    }\n}","import React from 'react'\nimport TreatmentChartView from './TreatmentChartView'\nimport ScrollableDesc from './ScrollableDesc'\nimport DummyChartView from './DummyChartView'\nimport ChartLegend from './ChartLegend'\nimport Utils from '../Utils';\n\nexport default class TreatmentDisplay extends React.Component { \n    render() {\n        if(!this.props.question) {\n            return null;\n        }\n        // Ugh, more hacky shit. \n        // Basically we need to adjust the column size based on how many treatment groups there are\n        // But bootstrap is too stupid to figure it out by itself\n        let columnWidth = `col-md-${10 - 2 * this.props.question.questions.length}`;\n        let chartViews = this.props.question.questions.map(question => \n            <div className = {columnWidth}>\n                <TreatmentChartView\n                    survey = { this.props.survey } \n                    data = { this.props.data.filter(x => question.treatments.indexOf(x[\"mechanisms_rando\"]) >= 0) }\n                    selectedGroup = { this.props.group }\n                    selectedQuestion = { {color: this.props.question.color, sorter: this.props.question.sorter, ...question} }\n                    elementId = {`${question.title}_chart`}\n                />\n            </div>\n        )\n\n        let colorPattern = Utils.getColorPattern(this.props.question);\n\n        let descriptions = this.props.question.questions.map(question => \n            <div className = {columnWidth}>\n                <ScrollableDesc\n                    title = {question.title}\n                    content = {question.description}\n                    height = {\"100px\"}\n                />\n            </div>\n            )\n        return(\n            <div className = \"TreatmentDisplay\">\n                <div className = \"row\">\n                    <div className = \"col-md-3\">\n                        <ScrollableDesc\n                            title = {this.props.group.title }\n                            content = {\" \"}\n                            height = {\"100px\"}\n                        /> \n                    </div>\n                    <div className = \"col-md-9\">\n                        <div className = \"row\">\n                            {descriptions}\n                        </div>\n                    </div>\n                </div>\n                <div className = \"row\">\n                    <div className = \"col-md-3\"></div>\n                    <div className = \"col-md-9\">\n                        <ChartLegend \n                            data = { this.props.data }\n                            question = { this.props.question }\n                        />\n                    </div>\n                </div>\n                <div className = \"row\">\n                    <div className = \"col-md-3\">\n                        <DummyChartView \n                            survey = { this.props.survey } \n                            data = { this.props.data }\n                            selectedGroup = { this.props.group }\n                            selectedQuestion = { this.props.question }\n                            elementId = {`dummy_chart`}\n                        />\n                    </div>\n                    <div className = \"col-md-9\">\n                        <div className = \"row\">\n                            {chartViews}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport '../css/DataDisplay.css'\nimport DataType from '../DataType'\nimport CategoricalDisplay from './CategoricalDisplay'\nimport NumericDisplay from './NumericDisplay'\nimport TreatmentDisplay from './TreatmentDisplay'\n\nexport default class DataDisplay extends React.Component {\n    render() {\n        let question = this.props.selectedQuestion;\n        let specificDisplay = null;\n        if(!question || !this.props.selectedGroup) {\n            return null;\n        }\n        switch(question.type) {\n            case DataType.CATEGORICAL:\n                specificDisplay = <CategoricalDisplay \n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.NUMERIC:\n                specificDisplay = <NumericDisplay\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            case DataType.TREATMENT:\n                specificDisplay =  <TreatmentDisplay\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    group = { this.props.selectedGroup }\n                    question = { this.props.selectedQuestion }\n                />\n                break;\n            default: \n                throw new Error(`Invalid data type for ${ this.props.selectedQuestion.id}`)\n\n        }\n        return (\n            <div className = \"DataDisplay\">\n                { specificDisplay }\n            </div>\n        )\n    }\n     \n}","/* eslint no-undef: \"off\"*/\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport FieldSelect from './FieldSelect'\nimport { surveys, groups } from '../config/fields.json'\nimport NotFound from './NotFound'\nimport DataDisplay from './DataDisplay'\nimport incomeSurveyData from './../json_data/data_income_survey.json'\n\n// This is to cache the CSV data so that we are not consistently pinging the server for it.\nvar dataCache = {\n    \"income_survey\" : incomeSurveyData\n};\nexport default class DataPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedGroup : undefined,\n            selectedTopic : undefined,\n            selectedQuestion : undefined\n        }\n        this.handleGroupSelect = this.handleGroupSelect.bind(this);\n        this.handleTopicSelect = this.handleTopicSelect.bind(this);\n        this.handleQuestionSelect = this.handleQuestionSelect.bind(this); \n    }\n    componentWillMount() {\n        this.surveyId = this.props.surveyId;\n        if (this.surveyId && this.surveyId in surveys) {\n            this.survey = surveys[this.surveyId];\n        }\n        this.groups = {...groups, ... (this.survey.additionalGroups || {})}\n    }\n\n    render() {\n        if(!this.survey) {\n            return <NotFound />\n        }\n        return (\n            <div className = \"container-fluid\">\n                <div className = \"row\">\n                    <div className = \"col-md-4\">\n                        <FieldSelect\n                            title = \"Topic\"\n                            description = \"Select a topic that you would like to examine\"\n                            options = { this.survey.topics }\n                            selected = {this.state.selectedTopic ? this.state.selectedTopic.id : null}\n                            handleSelect = {this.handleTopicSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-4\">\n                        <FieldSelect\n                            title = \"Question\"\n                            description = \"Select a question to examine\"\n                            options = {this.state.selectedTopic ? \n                                this.state.selectedTopic.questions :\n                                null\n                            }\n                            selected = {this.state.selectedQuestion ? this.state.selectedQuestion.id : null}\n                            handleSelect = {this.handleQuestionSelect}\n                        />\n                    </div>\n                    <div className = \"col-md-4\">\n                        <FieldSelect \n                            title = \"Group\"\n                            description = \"Select how you would like to group responses\"\n                            options = { this.state.selectedTopic ? this.groups : null }\n                            selected = {this.state.selectedGroup ? this.state.selectedGroup.id : null}\n                            handleSelect = {this.handleGroupSelect}\n                        />\n                    </div>\n                </div>\n                \n                <DataDisplay\n                    survey = { this.survey } \n                    data = { this.state.surveyData }\n                    selectedGroup = { this.state.selectedGroup }\n                    selectedQuestion = { this.state.selectedQuestion } \n                />\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        if(!this.survey){\n            return;\n        }\n        document.title = this.survey.title;\n        if(this.surveyId in dataCache) {\n            this.setState({\n                surveyData : dataCache[this.surveyId]\n            });\n        }\n        else {\n            d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.surveyId}.csv`).then((data) => {\n                dataCache[this.surveyId] = data; \n                this.setState({\n                  surveyData : data\n                })\n              });\n        }\n      }\n\n    handleGroupSelect(event) {\n        this.setState({\n            selectedGroup : this.groups[event.target.value]\n        })\n    }\n\n    handleTopicSelect(event) {\n        this.setState({\n            selectedTopic : this.survey.topics[event.target.value],\n            selectedQuestion : undefined,\n            //selectedGroup : undefined\n        })\n    }\n    \n    handleQuestionSelect(event) {\n        this.setState({\n            selectedQuestion : this.state.selectedTopic.questions[event.target.value]\n        })\n    }\n}\n\nDataPage.propTypes = {\n    survey : PropTypes.object\n}","import React from 'react'\n\nexport default class HomePage extends React.Component {\n    render() {\n        document.title = \"Understanding Economics\";\n        return (\n            <div className = \"HomePage\">\n                <span>\n                    <p>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                    </p>\n                </span>\n\n                \n            </div>\n        )\n    }\n}","import React from 'react'\n\nexport default class HomePage extends React.Component {\n    render() {\n        document.title = \"Background - Understanding Economics\";\n        return (\n            <div className = \"HomePage\">\n                <span>\n                    <p>\n                       Some background info about the project here.\n                    </p>\n\n                    <p>\n                        Some other background info.\n                    </p>\n                </span>\n\n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar'\nimport DataPage from './components/DataPage'\nimport HomePage from './components/HomePage'\nimport BackgroundPage from './components/BackgroundPage'\nimport { Route, Switch, HashRouter as Router } from 'react-router-dom'\nimport NotFound from './components/NotFound'\nimport { surveys } from './config/fields.json'\n\n\nclass App extends React.Component {\n  constructor() {\n    super(); \n    this.state = {\n      surveyData : null,\n      selectedGroup : null,\n      selectedQuestion : null\n    }\n  }\n  \n  render() {\n    // This is a suboptimal way to do this, but I want to treat each DataPage as a separate component\n    // This way the component mounts and unmounts each time\n    let surveyRoutes = Object.keys(surveys).map(surveyId => {\n        return (\n            <Route exact path ={`/survey/${surveyId}`} component = {() => <DataPage surveyId = {`${surveyId}`}/> } />\n        )\n    })\n\n    \n    return (\n      <Router basename = \"/\">\n        <div className=\"App container\">\n          <h2>Understanding Economics</h2>\n          <NavigationBar />\n          <Switch>\n            <Route exact path=\"/\" component={HomePage}/>\n            <Route exact path=\"/background\" component={BackgroundPage}/>\n            {surveyRoutes}\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}