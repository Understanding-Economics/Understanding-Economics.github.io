{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/DataPage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CrossTabView from './CrossTabView';\nimport ChartView from './ChartView';\nimport FieldSelect from './FieldSelect';\nimport { surveys, groups } from '../config/fields.json';\nexport default class DataPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedGroup: undefined,\n      selectedTopic: undefined,\n      selectedQuestion: undefined\n    };\n    this.handleGroupSelect = this.handleGroupSelect.bind(this);\n    this.handleTopicSelect = this.handleTopicSelect.bind(this);\n    this.handleQuestionSelect = this.handleQuestionSelect.bind(this);\n  }\n\n  componentWillMount() {\n    const params = this.props.match.params;\n\n    if (this.props.match.params.surveyId == null) {\n      throw new Error(\"Expected a survey id\");\n    }\n\n    this.surveyId = this.props.match.params.surveyId;\n    this.survey = surveys[this.props.surveyId];\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(FieldSelect, {\n      title: \"Group\",\n      description: \"Select how you would like to group responses\",\n      options: groups,\n      selected: this.state.selectedGroup,\n      handleSelect: this.handleGroupSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(FieldSelect, {\n      title: \"Topic\",\n      description: \"Select a topic that you would like to examine\",\n      options: this.survey.topics,\n      selected: this.state.selectedTopic,\n      handleSelect: this.handleTopicSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(FieldSelect, {\n      title: \"Question\",\n      description: \"Select a question to examine\",\n      options: this.state.selectedTopic ? this.survey.topics[this.state.selectedTopic].questions : null,\n      selected: this.state.selectedQuestion,\n      handleSelect: this.handleQuestionSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(ChartView, {\n      survey: this.survey,\n      data: this.state.surveyData,\n      selectedGroup: groups[this.state.selectedGroup],\n      selectedQuestion: this.state.selectedQuestion ? this.survey.topics[this.state.selectedTopic].questions[this.state.selectedQuestion] : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(CrossTabView, {\n      survey: this.survey,\n      data: this.state.surveyData,\n      selectedGroup: groups[this.state.selectedGroup],\n      selectedQuestion: this.state.selectedQuestion ? this.survey.topics[this.state.selectedTopic].questions[this.state.selectedQuestion] : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n  componentDidMount() {\n    document.title = surveys[this.props.surveyId].title;\n    d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.props.surveyId}.csv`).then(data => {\n      this.setState({\n        surveyData: data\n      });\n    });\n  }\n\n  handleGroupSelect(event) {\n    this.setState({\n      selectedGroup: event.target.value\n    });\n  }\n\n  handleTopicSelect(event) {\n    this.setState({\n      selectedTopic: event.target.value,\n      selectedQuestion: undefined\n    });\n  }\n\n  handleQuestionSelect(event) {\n    this.setState({\n      selectedQuestion: event.target.value\n    });\n  }\n\n}\nDataPage.propTypes = {\n  survey: PropTypes.object\n};","map":{"version":3,"sources":["/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/DataPage.js"],"names":["React","PropTypes","CrossTabView","ChartView","FieldSelect","surveys","groups","DataPage","Component","constructor","state","selectedGroup","undefined","selectedTopic","selectedQuestion","handleGroupSelect","bind","handleTopicSelect","handleQuestionSelect","componentWillMount","params","props","match","surveyId","Error","survey","render","topics","questions","surveyData","componentDidMount","document","title","d3","csv","process","env","PUBLIC_URL","then","data","setState","event","target","value","propTypes","object"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport CrossTabView from './CrossTabView'\nimport ChartView from './ChartView'\nimport FieldSelect from './FieldSelect'\nimport { surveys, groups } from '../config/fields.json'\n\nexport default class DataPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedGroup : undefined,\n            selectedTopic : undefined,\n            selectedQuestion : undefined\n        }\n        this.handleGroupSelect = this.handleGroupSelect.bind(this);\n        this.handleTopicSelect = this.handleTopicSelect.bind(this);\n        this.handleQuestionSelect = this.handleQuestionSelect.bind(this); \n    }\n    componentWillMount() {\n        const { params } = this.props.match;\n        if (this.props.match.params.surveyId == null) {\n            throw new Error(\"Expected a survey id\");\n        }\n        this.surveyId = this.props.match.params.surveyId;\n        this.survey = surveys[this.props.surveyId];\n    }\n\n    render() {\n        return (\n            <div className = \"container\">\n                <div className = \"row\">\n                <div className = \"col-md-6\">\n                    <FieldSelect \n                        title = \"Group\"\n                        description = \"Select how you would like to group responses\"\n                        options = { groups }\n                        selected = {this.state.selectedGroup}\n                        handleSelect = {this.handleGroupSelect}\n                    />\n                </div>\n                <div className = \"col-md-6\">\n                    <FieldSelect\n                        title = \"Topic\"\n                        description = \"Select a topic that you would like to examine\"\n                        options = { this.survey.topics }\n                        selected = {this.state.selectedTopic}\n                        handleSelect = {this.handleTopicSelect}\n                    />\n                </div>\n                <div className = \"col-md-6\">\n                    <FieldSelect\n                        title = \"Question\"\n                        description = \"Select a question to examine\"\n                        options = {this.state.selectedTopic ? \n                            this.survey.topics[this.state.selectedTopic].questions :\n                            null\n                        }\n                        selected = {this.state.selectedQuestion}\n                        handleSelect = {this.handleQuestionSelect}\n                    />\n                </div>\n                </div>\n                \n                <div className = \"row\">\n                    <ChartView\n                        survey = { this.survey } \n                        data = { this.state.surveyData }\n                        selectedGroup = { groups[this.state.selectedGroup] }\n                        selectedQuestion = { this.state.selectedQuestion ? \n                            this.survey.topics[this.state.selectedTopic].questions[this.state.selectedQuestion] : null\n                        } \n                    />\n                </div>\n                <div className = \"row\">\n                    <CrossTabView\n                        survey = { this.survey } \n                        data = { this.state.surveyData }\n                        selectedGroup = { groups[this.state.selectedGroup] }\n                        selectedQuestion = { this.state.selectedQuestion ? \n                            this.survey.topics[this.state.selectedTopic].questions[this.state.selectedQuestion] : null\n                        } \n                    />\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        document.title = surveys[this.props.surveyId].title;\n        d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.props.surveyId}.csv`).then((data) => {\n          this.setState({\n            surveyData : data\n          })\n        });\n      }\n\n    handleGroupSelect(event) {\n        this.setState({\n            selectedGroup : event.target.value\n        })\n    }\n\n    handleTopicSelect(event) {\n        this.setState({\n            selectedTopic : event.target.value,\n            selectedQuestion : undefined\n        })\n    }\n    \n    handleQuestionSelect(event) {\n        this.setState({\n            selectedQuestion : event.target.value\n        })\n    }\n}\n\nDataPage.propTypes = {\n    survey : PropTypes.object\n}"]},"metadata":{},"sourceType":"module"}