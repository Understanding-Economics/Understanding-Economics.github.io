{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/CrossTabView.js\";\nimport React, { Component } from 'react';\nimport DataView from './DataView';\nexport default class CrossTabView extends Component {\n  render() {\n    return React.createElement(DataView, {\n      elementId: \"crosstab\",\n      fields: this.props.fields,\n      data: this.props.data,\n      selectedGroup: this.props.selectedGroup,\n      selectedQuestion: this.props.selectedQuestion,\n      renderFunction: this.renderCrossTabs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    });\n  }\n\n  renderCrossTabs(elementId, selectedGroup, selectedQuestion, data, fields) {\n    let cleanData = data.map(x => {\n      return {\n        group: x[selectedGroup],\n        response: x[selectedQuestion]\n      };\n    });\n    console.log('Hello');\n\n    if (fields[selectedQuestion].numeric) {\n      $(`#${elementId}`).pivot(cleanData, {\n        rows: [\"group\"],\n        aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"])\n      });\n    } else {\n      $(`#${elementId}`).pivot(cleanData, {\n        rows: [\"group\"],\n        cols: [\"response\"],\n        aggregator: $.pivotUtilities.aggregators[\"Count\"]()\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/CrossTabView.js"],"names":["React","Component","DataView","CrossTabView","render","props","fields","data","selectedGroup","selectedQuestion","renderCrossTabs","elementId","cleanData","map","x","group","response","console","log","numeric","$","pivot","rows","aggregator","pivotUtilities","aggregators","cols"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,YAAN,SAA2BF,SAA3B,CAAoC;AAC/CG,EAAAA,MAAM,GAAG;AACL,WAAO,oBAAC,QAAD;AACK,MAAA,SAAS,EAAG,UADjB;AAEK,MAAA,MAAM,EAAK,KAAKC,KAAL,CAAWC,MAF3B;AAGK,MAAA,IAAI,EAAK,KAAKD,KAAL,CAAWE,IAHzB;AAIK,MAAA,aAAa,EAAK,KAAKF,KAAL,CAAWG,aAJlC;AAKK,MAAA,gBAAgB,EAAK,KAAKH,KAAL,CAAWI,gBALrC;AAMK,MAAA,cAAc,EAAK,KAAKC,eAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAQH;;AAEDA,EAAAA,eAAe,CAACC,SAAD,EAAYH,aAAZ,EAA2BC,gBAA3B,EAA6CF,IAA7C,EAAmDD,MAAnD,EAA2D;AACtE,QAAIM,SAAS,GAAGL,IAAI,CAACM,GAAL,CAAUC,CAAD,IAAO;AAAE,aAAO;AAACC,QAAAA,KAAK,EAAGD,CAAC,CAACN,aAAD,CAAV;AAA2BQ,QAAAA,QAAQ,EAAGF,CAAC,CAACL,gBAAD;AAAvC,OAAP;AAAmE,KAArF,CAAhB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,QAAGZ,MAAM,CAACG,gBAAD,CAAN,CAAyBU,OAA5B,EAAqC;AACjCC,MAAAA,CAAC,CAAE,IAAGT,SAAU,EAAf,CAAD,CAAmBU,KAAnB,CAAyBT,SAAzB,EACI;AACIU,QAAAA,IAAI,EAAG,CAAC,OAAD,CADX;AAEIC,QAAAA,UAAU,EAAEH,CAAC,CAACI,cAAF,CAAiBC,WAAjB,CAA6B,SAA7B,EAAwC,CAAC,UAAD,CAAxC;AAFhB,OADJ;AAKH,KAND,MAOK;AACDL,MAAAA,CAAC,CAAE,IAAGT,SAAU,EAAf,CAAD,CAAmBU,KAAnB,CAAyBT,SAAzB,EACI;AACIU,QAAAA,IAAI,EAAG,CAAC,OAAD,CADX;AAEII,QAAAA,IAAI,EAAE,CAAC,UAAD,CAFV;AAGIH,QAAAA,UAAU,EAAEH,CAAC,CAACI,cAAF,CAAiBC,WAAjB,CAA6B,OAA7B;AAHhB,OADJ;AAMH;AACJ;;AA9B8C","sourcesContent":["import React, { Component } from 'react'\nimport DataView from './DataView'\n\nexport default class CrossTabView extends Component{\n    render() {\n        return <DataView \n                    elementId = \"crosstab\" \n                    fields = { this.props.fields }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderCrossTabs }\n                />\n    }\n\n    renderCrossTabs(elementId, selectedGroup, selectedQuestion, data, fields) {\n        let cleanData = data.map((x) => { return {group : x[selectedGroup], response : x[selectedQuestion]} });\n        console.log('Hello');\n        if(fields[selectedQuestion].numeric) {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"])\n                });\n        }\n        else {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [\"group\"],\n                    cols: [\"response\"],\n                    aggregator: $.pivotUtilities.aggregators[\"Count\"]()\n                });\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}