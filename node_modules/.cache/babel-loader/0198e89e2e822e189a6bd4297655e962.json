{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/DataPage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CrossTabView from './CrossTabView';\nimport ChartView from './ChartView';\nimport { surveys, groups } from '../config/fields.json';\nexport default class DataPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedGroup: undefined,\n      selectedTopic: undefined,\n      selectedQuestion: undefined\n    };\n    this.handleGroupSelect = this.handleGroupSelect.bind(this);\n    this.handleTopicSelect = this.handleTopicSelect.bind(this);\n    this.handleQuestionSelect = this.handleQuestionSelect.bind(this);\n  }\n\n  render() {\n    if (this.props.surveyId == null) {\n      throw new Error(\"Expected a survey id\");\n    }\n\n    let survey = surveys[surveyId];\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(FieldSelect, {\n      title: \"Group\",\n      description: \"Select how you would like to group responses\",\n      options: getValues(groups),\n      selected: this.state.selectedGroup,\n      handleSelect: this.handleGroupSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(FieldSelect, {\n      title: \"Topic\",\n      description: \"Select a topic that you would like to examine\",\n      options: getValues(survey.topics),\n      selected: this.state.selectedTopic,\n      handleSelect: this.handleTopicSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(FieldSelect, {\n      title: \"Question\",\n      description: \"Select a question to examine\",\n      options: this.state.selectedTopic ? getValues(survey[this.state.selectedTopic].questions) : null,\n      selected: this.state.selectedQuestion,\n      handleSelect: this.handleQuestionSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(ChartView, {\n      survey: this.props.survey,\n      data: this.state.surveyData,\n      selectedGroup: this.state.selectedGroup,\n      selectedQuestion: this.state.selectedQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(CrossTabView, {\n      survey: this.props.survey,\n      data: this.state.surveyData,\n      selectedGroup: this.state.selectedGroup,\n      selectedQuestion: this.state.selectedQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })));\n  }\n\n  componentDidMount() {\n    d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.props.surveyId}.csv`).then(data => {\n      console.log(\"Loaded data\");\n      this.setState({\n        surveyData: data\n      });\n    });\n  }\n\n  handleGroupSelect(event) {\n    this.setState({\n      selectedGroup: event.target.value\n    });\n  }\n\n  handleTopicSelect(event) {\n    this.setState({\n      selectedTopic: event.target.value,\n      selectedQuestion: undefined\n    });\n  }\n\n  handleQuestionSelect(event) {\n    this.setState({\n      selectedQuestion: event.target.value\n    });\n  }\n\n}\n\nfunction getValues(dict) {\n  return Object.keys(dict).map(key => dict[key]);\n}\n\nDataPage.propTypes = {\n  survey: PropTypes.object\n};","map":{"version":3,"sources":["/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/DataPage.js"],"names":["React","PropTypes","CrossTabView","ChartView","surveys","groups","DataPage","Component","constructor","state","selectedGroup","undefined","selectedTopic","selectedQuestion","handleGroupSelect","bind","handleTopicSelect","handleQuestionSelect","render","props","surveyId","Error","survey","getValues","topics","questions","surveyData","componentDidMount","d3","csv","process","env","PUBLIC_URL","then","data","console","log","setState","event","target","value","dict","Object","keys","map","key","propTypes","object"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport CrossTabView from './CrossTabView'\nimport ChartView from './ChartView'\nimport { surveys, groups } from '../config/fields.json'\n\nexport default class DataPage extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedGroup : undefined,\n            selectedTopic : undefined,\n            selectedQuestion : undefined\n        }\n        this.handleGroupSelect = this.handleGroupSelect.bind(this);\n        this.handleTopicSelect = this.handleTopicSelect.bind(this);\n        this.handleQuestionSelect = this.handleQuestionSelect.bind(this); \n    }\n    render() {\n        if (this.props.surveyId == null) {\n            throw new Error(\"Expected a survey id\");\n        }\n        let survey = surveys[surveyId];\n        return (\n            <div className = \"container\">\n                <FieldSelect \n                    title = \"Group\"\n                    description = \"Select how you would like to group responses\"\n                    options = {getValues(groups)}\n                    selected = {this.state.selectedGroup}\n                    handleSelect = {this.handleGroupSelect}\n                />\n                <FieldSelect\n                    title = \"Topic\"\n                    description = \"Select a topic that you would like to examine\"\n                    options = {getValues(survey.topics)}\n                    selected = {this.state.selectedTopic}\n                    handleSelect = {this.handleTopicSelect}\n                />\n                <FieldSelect\n                    title = \"Question\"\n                    description = \"Select a question to examine\"\n                    options = {this.state.selectedTopic ? \n                        getValues(survey[this.state.selectedTopic].questions) :\n                        null\n                    }\n                    selected = {this.state.selectedQuestion}\n                    handleSelect = {this.handleQuestionSelect}\n                />\n                <div className = \"row\">\n                    <ChartView\n                        survey = { this.props.survey } \n                        data = { this.state.surveyData }\n                        selectedGroup = { this.state.selectedGroup }\n                        selectedQuestion = { this.state.selectedQuestion } \n                    />\n                </div>\n                <div className = \"row\">\n                    <CrossTabView\n                        survey = { this.props.survey } \n                        data = { this.state.surveyData }\n                        selectedGroup = { this.state.selectedGroup }\n                        selectedQuestion = { this.state.selectedQuestion } \n                    />\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        d3.csv(`${process.env.PUBLIC_URL}/data/data_${this.props.surveyId}.csv`).then((data) => {\n          console.log(\"Loaded data\");\n          this.setState({\n            surveyData : data\n          })\n        });\n      }\n\n    handleGroupSelect(event) {\n        this.setState({\n            selectedGroup : event.target.value\n        })\n    }\n\n    handleTopicSelect(event) {\n        this.setState({\n            selectedTopic : event.target.value,\n            selectedQuestion : undefined\n        })\n    }\n    \n    handleQuestionSelect(event) {\n        this.setState({\n            selectedQuestion : event.target.value\n        })\n    }\n}\n\nfunction getValues(dict) {\n    return Object.keys(dict).map(key => dict[key])\n}\n\nDataPage.propTypes = {\n    survey : PropTypes.object\n}"]},"metadata":{},"sourceType":"module"}