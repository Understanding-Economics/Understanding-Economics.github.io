{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/ChartView.js\";\nimport React from 'react';\nimport DataView from './DataView';\nexport default class ChartView extends React.Component {\n  render() {\n    return React.createElement(DataView, {\n      elementId: \"chart\",\n      survey: this.props.survey,\n      data: this.props.data,\n      selectedGroup: this.props.selectedGroup,\n      selectedQuestion: this.props.selectedQuestion,\n      renderFunction: this.renderChart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    });\n  }\n\n  renderChart(elementId, selectedGroup, selectedQuestion, data) {\n    let cleanData = data.map(x => {\n      return {\n        group: x[selectedGroup.id],\n        response: x[selectedQuestion.id] || \" No Response\"\n      };\n    });\n\n    if (selectedQuestion.numeric) {\n      $(`#${elementId}`).pivot(cleanData, {\n        rows: [selectedGroup.id],\n        aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"]),\n        renderer: $.pivotUtilities.c3_renderers[\"Horizontal Bar Chart\"],\n        rowOrder: \"value_z_to_a\"\n      });\n    } else {\n      $(`#${elementId}`).pivot(cleanData, {\n        rows: [selectedGroup.id],\n        cols: [selectedQuestion.id],\n        aggregator: $.pivotUtilities.aggregators[\"Count as Fraction of Rows\"](),\n        renderer: $.pivotUtilities.c3_renderers[\"Horizontal Stacked Bar Chart\"],\n        rowOrder: \"value_z_to_a\",\n        colOrder: \"value_z_to_a\"\n      });\n      document.getElementById(\"chart\").getElementsByTagName(\"p\")[0].remove();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Kevin/Documents/GitHub/Understanding-Economics.github.io/src/components/ChartView.js"],"names":["React","DataView","ChartView","Component","render","props","survey","data","selectedGroup","selectedQuestion","renderChart","elementId","cleanData","map","x","group","id","response","numeric","$","pivot","rows","aggregator","pivotUtilities","aggregators","renderer","c3_renderers","rowOrder","cols","colOrder","document","getElementById","getElementsByTagName","remove"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AACnDC,EAAAA,MAAM,GAAG;AACL,WAAO,oBAAC,QAAD;AACK,MAAA,SAAS,EAAG,OADjB;AAEK,MAAA,MAAM,EAAK,KAAKC,KAAL,CAAWC,MAF3B;AAGK,MAAA,IAAI,EAAK,KAAKD,KAAL,CAAWE,IAHzB;AAIK,MAAA,aAAa,EAAK,KAAKF,KAAL,CAAWG,aAJlC;AAKK,MAAA,gBAAgB,EAAK,KAAKH,KAAL,CAAWI,gBALrC;AAMK,MAAA,cAAc,EAAK,KAAKC,WAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAQH;;AAEDA,EAAAA,WAAW,CAACC,SAAD,EAAYH,aAAZ,EAA2BC,gBAA3B,EAA6CF,IAA7C,EAAmD;AAC1D,QAAIK,SAAS,GAAGL,IAAI,CAACM,GAAL,CAAUC,CAAD,IAAO;AAAE,aAAO;AAACC,QAAAA,KAAK,EAAGD,CAAC,CAACN,aAAa,CAACQ,EAAf,CAAV;AAA8BC,QAAAA,QAAQ,EAAGH,CAAC,CAACL,gBAAgB,CAACO,EAAlB,CAAD,IAA0B;AAAnE,OAAP;AAA2F,KAA7G,CAAhB;;AACA,QAAGP,gBAAgB,CAACS,OAApB,EAA6B;AACzBC,MAAAA,CAAC,CAAE,IAAGR,SAAU,EAAf,CAAD,CAAmBS,KAAnB,CAAyBR,SAAzB,EACI;AACIS,QAAAA,IAAI,EAAG,CAACb,aAAa,CAACQ,EAAf,CADX;AAEIM,QAAAA,UAAU,EAAEH,CAAC,CAACI,cAAF,CAAiBC,WAAjB,CAA6B,SAA7B,EAAwC,CAAC,UAAD,CAAxC,CAFhB;AAGIC,QAAAA,QAAQ,EAAEN,CAAC,CAACI,cAAF,CAAiBG,YAAjB,CAA8B,sBAA9B,CAHd;AAIIC,QAAAA,QAAQ,EAAE;AAJd,OADJ;AAOH,KARD,MASK;AACDR,MAAAA,CAAC,CAAE,IAAGR,SAAU,EAAf,CAAD,CAAmBS,KAAnB,CAAyBR,SAAzB,EAAoC;AAChCS,QAAAA,IAAI,EAAG,CAACb,aAAa,CAACQ,EAAf,CADyB;AAEhCY,QAAAA,IAAI,EAAE,CAACnB,gBAAgB,CAACO,EAAlB,CAF0B;AAGhCM,QAAAA,UAAU,EAAEH,CAAC,CAACI,cAAF,CAAiBC,WAAjB,CAA6B,2BAA7B,GAHoB;AAIhCC,QAAAA,QAAQ,EAAEN,CAAC,CAACI,cAAF,CAAiBG,YAAjB,CAA8B,8BAA9B,CAJsB;AAKhCC,QAAAA,QAAQ,EAAE,cALsB;AAKNE,QAAAA,QAAQ,EAAE;AALJ,OAApC;AAOAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,oBAAjC,CAAsD,GAAtD,EAA2D,CAA3D,EAA8DC,MAA9D;AACH;AACJ;;AAjCkD","sourcesContent":["import React from 'react'\nimport DataView from './DataView'\n\nexport default class ChartView extends React.Component { \n    render() {\n        return <DataView\n                    elementId = \"chart\"\n                    survey = { this.props.survey }\n                    data = { this.props.data }\n                    selectedGroup = { this.props.selectedGroup }\n                    selectedQuestion = { this.props.selectedQuestion }\n                    renderFunction = { this.renderChart }\n                />\n    }\n\n    renderChart(elementId, selectedGroup, selectedQuestion, data) {\n        let cleanData = data.map((x) => { return {group : x[selectedGroup.id], response : x[selectedQuestion.id] || \" No Response\"} });\n        if(selectedQuestion.numeric) {\n            $(`#${elementId}`).pivot(cleanData, \n                {\n                    rows : [selectedGroup.id],\n                    aggregator: $.pivotUtilities.aggregators[\"Average\"]([\"response\"]),\n                    renderer: $.pivotUtilities.c3_renderers[\"Horizontal Bar Chart\"],\n                    rowOrder: \"value_z_to_a\"\n                });\n        }\n        else { \n            $(`#${elementId}`).pivot(cleanData, {\n                rows : [selectedGroup.id],\n                cols: [selectedQuestion.id],\n                aggregator: $.pivotUtilities.aggregators[\"Count as Fraction of Rows\"](),\n                renderer: $.pivotUtilities.c3_renderers[\"Horizontal Stacked Bar Chart\"],\n                rowOrder: \"value_z_to_a\", colOrder: \"value_z_to_a\",\n            });\n            document.getElementById(\"chart\").getElementsByTagName(\"p\")[0].remove();\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}